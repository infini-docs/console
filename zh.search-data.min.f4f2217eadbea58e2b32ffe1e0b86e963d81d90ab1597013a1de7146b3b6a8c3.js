'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/zh/docs/reference/initialization/','title':"初始化向导",'section':"功能手册",'content':"初始化向导 #  简介 #  首次安装后打开系统，会进入初始化向导页面，在这里需要初始化一些配置，如系统集群、初始化默认用户等。\n配置 #  配置系统集群，elasticsearch 要求 7.3 或更高版本，用于存储相关数据。\n  TLS\n默认http，开启后为https。\n  Auth\n默认不需要连接认证，开启后，需要输入用户名\u0026amp;密码。\n    连接测试\n测试输入的连接配置，成功后即可进行下一步。\n  初始化 #  进入初始化步骤时，会校验集群中是否已存在旧数据，可以选择使用旧数据，也可以删除数据后再进行初始化。\n 存在旧数据  可以使用提示的脚本删除旧数据后，点击刷新，进入初始化默认用户\n也可以点击跳过，使用旧数据。\n  不存在旧数据\n将会直接进入初始化默认用户界面\n  完成 #  当初始化完成后，即可进入 Console 。\n"});index.add({'id':1,'href':'/zh/docs/reference/platform/overview/','title':"平台概览",'section':"平台管理",'content':"平台概览 #  简介 #  在平台概览里，可以查看集群、节点、索引、主机层面的主要指标，了解各层面的运行状态。\n集群 #  节点 #  索引 #  主机 #  主机数据来源于 INFINI Agent 数据上报和 Elasticsearch 节点发现。\n发现主机 #  点击主机列表右侧的按钮\u0026quot;Discover host\u0026quot;，勾选后，点击按钮\u0026quot;add hosts\u0026quot;即可添加主机到主机列表。\n"});index.add({'id':2,'href':'/zh/docs/getting-started/install/','title':"下载安装",'section':"入门指南",'content':"安装 INFINI Console #  INFINI Console 支持主流的操作系统和平台，程序包很小，没有任何额外的外部依赖，安装起来应该是很快的 ：）\n安装前准备 #  准备一个可以存储数据的 Elasticsearch 集群，要求为 7.3 及以上版本，用于 INFINI Console 存储相关数据。\n下载安装 #  根据您所在的操作系统和平台选择下面相应的下载地址：\n https://release.infinilabs.com/console/\n容器部署 #  INFINI Console 也支持 Docker 容器方式部署。\n了解更多  配置 #  下载 INFINI Console 安装包解压之后，打开console.yml配置文件，我们可以看到 以下配置节：\n#存储 INFINI Console 相关数据的 Elasticsearch 集群信息，版本 v7.3+ elasticsearch: - name: default enabled: true monitored: true endpoint: http://192.168.3.188:9299 basic_auth: username: elastic password: ZBdkVQUUdF1Sir4X4BGB 一般情况下，我们只需要修改配置里面的 endpoint 配置，若 Elasticsearch 开启了安全验证，则需要修改 username 和 password 配置。\n这里的用户要求具备集群的元数据、索引的元数据以及 .infini* 索引的完全访问权限，以及索引模板的创建权限。\n关于索引模板的初始设置，请查看这里 了解更多。\n启动 INFINI Console #  直接运行程序即可启动 INFINI Console 了(这里使用的是 mac 版本的，不同平台的程序文件名称略有不同)，如下：\n➜ BOOTSTRAP_USERNAME=admin BOOTSTRAP_PASSWORD=123456 ./console-mac-amd64 ___ __ ___ ___ / __\\/ / /___\\/\\ /\\ / \\ / / / / // // / \\ \\/ /\\ / / /__/ /__/ \\_//\\ \\_/ / /_// \\____|____|___/ \\___/___,' ___ ___ __ __ ___ __ __ / __\\/___\\/\\ \\ \\/ _\\ /___\\/ / /__\\ / / // // \\/ /\\ \\ // // / /_\\ / /__/ \\_// /\\ / _\\ \\/ \\_// /__//__ \\____|___/\\_\\ \\/ \\__/\\___/\\____|__/ [CONSOLE] INFINI Cloud Console, The easiest way to operate your own elasticsearch platform. [CONSOLE] 0.3.0_SNAPSHOT, 2022-03-31 10:26:41, 2023-12-31 10:10:10, fa04f6010144b7c5267c71ccaee30230ddf2432d [03-31 20:27:40] [INF] [app.go:174] initializing console. [03-31 20:27:40] [INF] [app.go:175] using config: /Users/shiyang/infini/console-0.3.0_SNAPSHOT-447-mac-amd64/console.yml. [03-31 20:27:40] [INF] [instance.go:72] workspace: /Users/shiyang/infini/console-0.3.0_SNAPSHOT-447-mac-amd64/data/console/nodes/c92psf1pdamk8rdhgqpg [03-31 20:27:40] [INF] [app.go:283] console is up and running now. [03-31 20:27:40] [INF] [metrics.go:63] ip:192.168.3.12, host:shiyangdeMacBook-Pro.local, labels:, tags: [03-31 20:27:40] [INF] [elastic.go:136] loading [5] remote elasticsearch configs [03-31 20:27:40] [INF] [actions.go:280] elasticsearch [default] is available [03-31 20:27:40] [INF] [actions.go:280] elasticsearch [lsy_cluster_1] is available [03-31 20:27:40] [INF] [actions.go:280] elasticsearch [es-v710] is available [03-31 20:27:40] [INF] [actions.go:280] elasticsearch [es-v7140] is available [03-31 20:27:40] [INF] [ui.go:197] ui listen at: http://0.0.0.0:9000 [03-31 20:27:40] [INF] [module.go:116] all modules are started 看到上面的启动信息，说明 INFINI Console 已经成功运行了，并且监听了 9000 端口, 在浏览器里面访问 9000 端口就可以登陆使用了，初始的用户名和密码信息通过环境变量 BOOTSTRAP_USERNAME、BOOTSTRAP_PASSWORD 来进行设置。\n停止 INFINI Console #  如果需要停止 INFINI Console，按 Ctrl+C 即可停止 INFINI Console 平台，如下：\n^C [CONSOLE] got signal: interrupt, start shutting down [03-31 20:33:10] [INF] [module.go:145] all modules are stopped [03-31 20:33:10] [INF] [app.go:267] console now terminated. [CONSOLE] 0.3.0_SNAPSHOT, uptime: 5m30.307832s __ _ __ ____ __ _ __ __ / // |/ // __// // |/ // / / // || // _/ / // || // / /_//_/|_//_/ /_//_/|_//_/ ©INFINI.LTD, All Rights Reserved. 配置服务后台运行 #  如果希望将 INFINI Console 以后台任务的方式运行，如下：\n➜ ./console -service install Success ➜ ./console -service start Success 卸载服务也很简单，如下：\n➜ ./console -service stop Success ➜ ./console -service uninstall Success "});index.add({'id':3,'href':'/zh/docs/reference/agent/manage/manage/','title':"功能介绍",'section':"探针管理",'content':"功能介绍 #  简介 #  探针管理包括审核探针(INFINI Agent)、查看运行状态、分配任务等功能，是集中管理探针(INFINI Agent)的地方。 去安装探针\n审核探针 #  进入菜单探针管理 \u0026gt; 实例管理 点击按钮 Discover Agent。 可以看到待审核列表。选中对应 Agent 并点击 Add Agents 完成审核。 删除探针 #  进入菜单探针管理 \u0026gt; 实例管理，在列表中点击对应列的删除，确认之后，探针即被删除。 任务设置 #  任务设置，是指下发/取消采集数据的任务给探针。探针在收到任务前，会一直处于等待状态。进入菜单探针管理 \u0026gt; 实例管理，在对应Agent列，点击Task Setting，配置任务然后点击保存。 "});index.add({'id':4,'href':'/zh/docs/reference/devtool/','title':"开发工具",'section':"功能手册",'content':"开发工具 #  简介 #  使用开发工具可以快速地编写和执行 Elasticsearch 查询以及其他的 elasticsearch API。 当开启安装验证后，所有的请求都会经过 API 级别权限校验\n打开开发工具 #  使用 Ctrl+Shift+O 快捷键打开或者在 console 右上角图标打开。\n执行请求快捷键 #  Command+Enter 或者 Ctrl+Enter\n多集群多 Tab 页支持 #  开发工具支持使用 Tab 页同时打开多个集群，即使是同一个集群，也可以打开多个，Tab页之间状态是独立的。 Tab 页默认使用集群名称作为标题，双击 Tab 页标题可以修改。 开发工具下方是一个状态栏，左侧是当前集群的健康状态、http 地址、版本信息， 右侧是 elasticsearch 接口请求的响应状态以及时长。\n查看请求头信息 #  当使用开发工具执行 elasticsearch 请求之后，可以在右侧点击 headers Tab页查看请求头信息。\n"});index.add({'id':5,'href':'/zh/docs/reference/data/','title':"数据管理",'section':"功能手册",'content':"数据管理 #  简介 #  INFINI Console 数据管理，可以让您无缝在不同的业务集群里面遨游，支持索引的常用管理操作，快速查看和浏览索引内的文档信息，就地进行文档的编辑和删除。同时支持创建数据视图，修改字段的展示格式，时序索引数据一键快速查看。\n"});index.add({'id':6,'href':'/zh/docs/reference/platform/monitoring/','title':"集群监控",'section':"平台管理",'content':"集群监控 #  简介 #  当注册的集群开启了监控之后，INFINI Console 会根据相应配置去目标集群定期采集数据， 包括集群、节点、索引层面的一些指标。然后在集群监控里面可以观测到这些指标，从而了解目标集群的运行状态。\n监控所需 Elasticsearch API 权限清单 #  _cluster/health，_cluster/stats，_cat/shards, /_nodes/\u0026lt;node_id\u0026gt;/stats _cat/indices, _stats, _cluster/state, _nodes, _alias, _cluster/settings\n开启集群监控 #  在集群注册或者修改集群配置的时候，可以看到如下界面\n可以看到有一个 Monitored 的开关，当这个开关打开时，代表当前集群是开启监控的。 集群注册的时候，默认是开启监控的。监控配置里面包括集群健康指标、集群指标、节点指标和索引指标， 并且可以分别设置是否开启和采集时间间隔。\n 以上是对单个集群的设置，在配置文件console.yaml中可以设置对所有集群的监控启停，默认情况下可以看到配置文件中有如下配置：\nmetrics: enabled: true major_ip_pattern: \u0026quot;192.*\u0026quot; queue: metrics elasticsearch: enabled: true cluster_stats: true node_stats: true index_stats: true 如果 metrics\u0026gt;enable 设置为 false, 那么所有的集群监控都是没有开启的； 如果 metrics\u0026gt;elasticsearch\u0026gt;cluster_stats\u0026gt;enabled 设置为 false，那么所有的 集群就不会采集集群层面的相关指标。\n 查看集群指标监控 #  开启监控之后，在 INFINI Console 左侧菜单平台管理下面的监控报表里可以查看集群的监控信息，如下：\n点击高级 tab 页查看集群层面更多的指标；\n如图所示，可以指定一个集群的多个节点查看节点相关指标，横向对比。 默认显示 top 5 的节点指标（ top 5 节点是根据最近15分钟节点的查询 qps 和写入 qps 之和计算）。 这里切换到索引 tab 页也可以指定几个查看索引的相关指标，和节点类似。 切换到线程池 tab 页查看节点线程池的相关指标。\n查看节点指标监控 #  点击节点 tab 页查看集群节点列表。\n列表中点击节点名称查看指定节点的监控\n这里可以查看单个节点的指标监控信息和相关分片信息\n查看索引指标监控 #  点击索引 tab 页查看集群索引列表。\n列表中点击节点名称查看指定索引的监控\n这里可以查看单个节点的指标监控信息和相关分片信息\n"});index.add({'id':7,'href':'/zh/docs/reference/system/security/user/','title':"用户管理",'section':"安全设置",'content':"用户管理 #  简介 #  用户管理包括对用户的增删改查操作以及重置用户密码.\n创建用户 #   用户名是必填的并且需要唯一，作为登录账号名. 昵称, 手机号, 邮箱都是可选的. 给用户分配一个或者多个角色. 用户标签是可选的，可用于给用户分组.  查询用户 #  输入关键字，点击搜索按钮查询用户\n更新用户 #  按需修改，点击保存按钮保存\n重置用户密码 #  输入新密码点击保存按钮重置密码\n"});index.add({'id':8,'href':'/zh/docs/reference/agent/install/install/','title':"下载安装",'section':"探针管理",'content':"安装探针(INFINI Agent) #   探针(INFINI Agent) 是 INFINI Console 的子模块，负责数据抓取和 Elasticsearch 实例管理等任务，接受 Console 权限控制和统一的任务调度。 支持主流的操作系统和平台，程序包很小，没有任何额外的外部依赖。  安装前准备 #  安装并运行 INFINI Console\n下载安装 #  根据您所在的操作系统和平台选择下面相应的下载地址：\n https://release.infinilabs.com/agent/\n容器部署 #  探针(INFINI Agent) 也支持 Docker 容器方式部署。\n了解更多  配置 #  下载 探针(INFINI Agent) 安装包解压之后，打开agent.yml配置文件，我们可以看到以下配置：\n#存储 INFINI Agent 相关数据的 Elasticsearch 集群信息，版本 v7.3+ #此处的 endpoint 需和 INFINI Console 的一致 elasticsearch: - name: default enabled: true monitored: false endpoint: http://192.168.3.4:9200 basic_auth: username: elastic password: ZBdkVQUUdF1Sir4X4BGB ... #INFINI Console的地址 agent.manager.endpoint: http://192.168.3.4:9000 通常，我们只需要修改配置里面的 endpoint 配置，若 Elasticsearch 开启了安全验证，则需要修改 username 和 password 配置。\n这里的用户要求具备集群的元数据、索引的元数据以及 .infini* 索引的完全访问权限，以及索引模板的创建权限。\n启动 INFINI Agent #  直接运行程序即可启动 探针(INFINI Agent) 了(这里使用的是 Mac 版本的，不同平台的程序文件名称略有不同)，如下：\n _ ___ __ __ _____ /_\\ / _ \\ /__\\/\\ \\ \\/__ \\ //_\\\\ / /_\\//_\\ / \\/ / / /\\/ / _ \\/ /_\\\\//__/ /\\ / / / \\_/ \\_/\\____/\\__/\\_\\ \\/ \\/ [AGENT] A light-weight, powerful and high-performance elasticsearch agent. [AGENT] 0.1.0#14, 2022-08-26 14:09:29, 2025-12-31 10:10:10, 4489a8dff2b68501a0dd9ae15276cf5751d50e19 [08-31 15:52:07] [INF] [app.go:164] initializing agent. [08-31 15:52:07] [INF] [app.go:165] using config: /Users/INFINI/agent/agent-0.1.0-14-mac-arm64/agent.yml. [08-31 15:52:07] [INF] [instance.go:72] workspace: /Users/INFINI/agent/agent-0.1.0-14-mac-arm64/data/agent/nodes/cc7h5qitoaj25p2g9t20 [08-31 15:52:07] [INF] [metrics.go:63] ip:192.168.3.22, host:INFINI-MacBook.local, labels:, tags: [08-31 15:52:07] [INF] [api.go:261] api listen at: http://0.0.0.0:8080 [08-31 15:52:07] [INF] [module.go:116] all modules are started [08-31 15:52:07] [INF] [manage.go:180] register agent to console [08-31 15:52:07] [INF] [actions.go:367] elasticsearch [default] is available [08-31 15:52:07] [INF] [manage.go:203] registering, waiting for review [08-31 15:52:07] [INF] [app.go:334] agent is up and running now. 看到上面的启动信息，说明 探针(INFINI Agent) 已经成功运行了!\n但此时 探针(INFINI Agent) 处于等待审核的状态，并不能做任何事情。 去审核吧\n停止 INFINI Agent #  如果需要停止 探针(INFINI Agent) ，按 Ctrl+C 即可停止 探针(INFINI Agent)，如下：\n^C [AGENT] got signal: interrupt, start shutting down [08-31 15:57:13] [INF] [module.go:145] all modules are stopped [08-31 15:57:13] [INF] [app.go:257] agent now terminated. [AGENT] 0.1.0, uptime: 5m6.240314s __ _ __ ____ __ _ __ __ / // |/ // __// // |/ // / / // || // _/ / // || // / /_//_/|_//_/ /_//_/|_//_/ ©INFINI.LTD, All Rights Reserved. 配置服务后台运行 #  如果希望将 探针(INFINI Agent) 以后台任务的方式运行，如下：\n➜ ./agent -service install Success ➜ ./agent -service start Success 卸载服务也很简单，如下：\n➜ ./agent -service stop Success ➜ ./agent -service uninstall Success "});index.add({'id':9,'href':'/zh/docs/reference/agent/install/docker/','title':"容器部署",'section':"探针管理",'content':"容器部署 #  探针(INFINI Agent) 支持容器方式部署。\n下载镜像 #  探针(INFINI Agent) 的镜像发布在 Docker 的官方仓库，地址如下：\n https://hub.docker.com/r/infinilabs/agent\n使用下面的命令即可获取最新的容器镜像：\ndocker pull infinilabs/agent:latest 验证镜像 #  将镜像下载到本地之后，可以看到 探针(INFINI Agent) 的容器镜像非常小，只有不到 20MB，所以下载是非常快的。\n✗ docker images REPOSITORY TAG IMAGE ID CREATED SIZE infinilabs/agent latest c7bd9ad063d9 4 days ago 13.8MB 创建配置 #  现在需要创建一个配置文件 agent.yml，来进行基本的配置，如下：\napi: enabled: true network: binding: 0.0.0.0:8080 metrics: enabled: true queue: metrics network: enabled: true summary: true details: true memory: metrics: - swap - memory disk: metrics: - ioqs - usage cpu: metrics: - idle - system - user - iowait - load elasticsearch: enabled: true agent_mode: true node_stats: true index_stats: true cluster_stats: true elasticsearch: - name: default enabled: true endpoint: http://192.168.3.4:9200 monitored: false discovery: enabled: true pipeline: - name: metrics_ingest auto_start: true keep_running: true processor: - json_indexing: index_name: \u0026quot;.infini_metrics\u0026quot; elasticsearch: \u0026quot;default\u0026quot; input_queue: \u0026quot;metrics\u0026quot; output_queue: name: \u0026quot;metrics_requests\u0026quot; label: tag: \u0026quot;metrics\u0026quot; worker_size: 1 bulk_size_in_mb: 10 - name: consume-metrics_requests auto_start: true keep_running: true processor: - bulk_indexing: bulk: compress: true batch_size_in_mb: 10 batch_size_in_docs: 5000 consumer: fetch_max_messages: 100 queues: type: indexing_merge when: cluster_available: [ \u0026quot;default\u0026quot; ] agent: major_ip_pattern: \u0026quot;192.*\u0026quot; labels: env: dev tags: - linux - x86 - es7 - v7.5 path.data: data path.logs: log agent.manager.endpoint: http://192.168.3.4:9000 Note: 上面配置里面的 Elasticsearch 的相关配置，请改成实际的服务器连接地址和认证信息，需要版本 v7.3 及以上。\n启动Agent #  使用如下命令启动Agent容器：\ndocker run -p 8080:8080 -v=`pwd`/agent.yml:/agent.yml infinilabs/agent:latest Docker Compose #  还可以使用 docker compose 来管理容器实例，新建一个 docker-compose.yml 文件如下：\nversion: \u0026quot;3.5\u0026quot; services: infini-agent: image: infinilabs/agent:latest ports: - 8080:8080 container_name: \u0026quot;infini-agent\u0026quot; volumes: - ./agent.yml:/agent.yml volumes: dist: 在配置文件所在目录，执行如下命令即可启动，如下：\n➜ docker-compose up Recreating infini-agent ... done Attaching to infini-agent infini-agent | _ ___ __ __ _____ infini-agent | /_\\ / _ \\ /__\\/\\ \\ \\/__ \\ infini-agent | //_\\\\ / /_\\//_\\ / \\/ / / /\\/ infini-agent | / _ \\/ /_\\\\//__/ /\\ / / / infini-agent | \\_/ \\_/\\____/\\__/\\_\\ \\/ \\/ infini-agent | infini-agent | [AGENT] A light-weight, powerful and high-performance elasticsearch agent. infini-agent | [AGENT] 0.1.0_SNAPSHOT#15, 2022-08-26 15:05:43, 2025-12-31 10:10:10, 164bd8a0d74cfd0ba5607352e125d72b46a1079e infini-agent | [08-31 09:11:45] [INF] [app.go:164] initializing agent. infini-agent | [08-31 09:11:45] [INF] [app.go:165] using config: /agent.yml. infini-agent | [08-31 09:11:45] [INF] [instance.go:72] workspace: /data/agent/nodes/cc7ibke5epac7314bf9g infini-agent | [08-31 09:11:45] [INF] [metrics.go:63] ip:172.18.0.2, host:bd9f43490911, labels:, tags: infini-agent | [08-31 09:11:45] [INF] [api.go:261] api listen at: http://0.0.0.0:8080 infini-agent | [08-31 09:11:45] [INF] [actions.go:367] elasticsearch [default] is available infini-agent | [08-31 09:11:45] [INF] [module.go:116] all modules are started infini-agent | [08-31 09:11:45] [INF] [manage.go:180] register agent to console infini-agent | [08-31 09:11:45] [INF] [app.go:334] agent is up and running now. "});index.add({'id':10,'href':'/zh/docs/reference/system/cluster/','title':"集群管理",'section':"系统管理",'content':"集群管理 #  简介 #  集群管理可以快速方便地帮助我们纳管跨版本的多个 Elasticsearch 集群。\n集群列表 #  在集群列表中可以查询注册的 Elasticsearch 集群\n集群注册 #  第一步填写集群地址，按需开启 TLS 和 身份验证（开启身份验证后需要输入用户名和密码）。\n第二步，信息确认\n 按需修改集群名称，集群描述； 是否开启监控（默认开启），启用监控之后可以在 console 监控功能里面查看 Elasticsearch 集群的各种指标 是否开启 Discovery（推荐开启） , 启用之后 console 会自动发现集群所有节点，当配置的集群地址不可用时，console 会尝试使用自动发现的其他节点中可用的地址和 Elasticsearch 交互  更新集群配置 #  点击集群列表表格中的编辑按钮，进入更新界面\n按需修改配置，然后点击保存按钮提交\n删除集群 #  点击集群列表表格中的删除按钮，进行二次确认，确认删除后执行删除操作。\n"});index.add({'id':11,'href':'/zh/docs/reference/alerting/message/','title':"告警中心",'section':"告警管理",'content':"告警中心 #  简介 #  消息中心默认展示的是当前系统内正在发生的告警事件，方便管理人员快速预览系统的执行状态。\n事件消息列表 #  消息列表聚合了所有已触发的告警事件，如每个告警规则重复触发了多次告警消息，这里只会聚合显示一条，点击详情就可以去看更多的信息。\n消息详情 #  点击消息列表行列中的详情按钮可以查看当前告警事件消息的详细内容，包含事件消息的基本信息，事件触发周期内的时序曲线图，规则执行检测历史记录等，如下图所示：\n忽略告警消息 #  如认为告警事件不需要做处理或者不重要，可以进行忽略操作，忽略后告警消息将不默认展在消息列表中，不过可以通过状态筛选过滤进行查询。\n操作步骤：点击消息列表表格中的忽略按钮，进行二次确认，填写忽略原因，提交后执行忽略操作。\n"});index.add({'id':12,'href':'/zh/docs/reference/system/command/','title':"常用命令",'section':"系统管理",'content':"常用命令 #  简介 #  常用命令用于在开发工具中将高频使用的 Elasticsearch 请求保存, 这样后续如果需要使用， 只需要在开发工具中使用 LOAD 命令加载，即可快速使用。\n保存常用命令 #  打开 console 右上角的开发工具(Ctrl+shift+o)， 在开发工具中选择需要保存的 Elasticsearch 请求 （支持一次选中多个请求保存为常用命令），选中之后点击工具栏里面的 Save As Command 提交。\n加载常用命令 #  在开发工具里，输入 LOAD + 保存的命令名称关键字 会自动提示相关已保存的常用命令， 选中要加载的命令后，按回车键即可自动加载相应的常用命令。\n常用命令列表 #  在常用命令列表中可以查询已经保存的常用命令\n点击在列表中常用命令名称一栏可以查看常用命令具体信息, 也可以修改名称和 tag 信息\n删除常用命令 #  点击常用命令列表中的删除按钮，进行二次确认，确认之后执行删除操作。\n"});index.add({'id':13,'href':'/zh/docs/reference/alerting/rule/','title':"告警规则",'section':"告警管理",'content':"告警规则 #  简介 #  告警规则包括数据源，指标定义，触发条件，消息通知四个部分的配置\n告警规则列表 #  在告警规则列表中可以查询已经添加的告警规则\n新建告警规则 #  在告警规则列表中点击新建按钮进入新建告警规则页面\n配置数据源 #   选择集群（必选） 选择索引，支持输入索引 pattern （必填） 输入 elasticsearch query DSL 查询过滤条件（可选） 选择时间字段（必选） 选择统计周期（用于时间字段聚合，默认一分钟）  配置告警指标以及触发条件 #   输入规则名称 按需添加分组的字段以及分组大小，可以添加多个，用于 terms 聚合 选择指标聚合字段以及统计类型，可以配置多个，当配置多个时必须配置公式用于计算最终的指标 配置告警触发条件 选择执行检查周期 输入告警事件标题（模版，被模版变量中的 title 引用，点击这里了解 模版语法 ） 输入告警事件消息（模版，被模版变量中的 message 引用，点击这里了解 模版语法 ）  配置消息通知 #   配置通知渠道，可以重新配置，也可以通过添加按钮选择已经创建好的渠道作为模版快速填充，并支持添加多个 按需选择是否开启通知升级 选择沉默周期（通知消息发送频率） 配置通知发送时间段 点击保存按钮提交  更新告警规则 #  在告警规则列表中选择需要更新的告警规则点击编辑按钮进入更新告警规则页\n删除告警规则 #  点击告警规则列表表格中的删除按钮，进行二次确认，确认删除后执行删除操作。\n常见规则模板一键导入 #  下面列举了一些常见告警规则，并且配置钉钉、企业微信、Slack等通知渠道，仅需要替换模板中指定的自定义变量，即可通过 Console 的 DevTools 工具快速导入规则。\n  Cluster Health Change to Red  Index Health Change to Red  Disk utilization is Too High  CPU utilization is Too High  JVM utilization is Too High  Shard Storage \u0026gt;= 55G  Elasticsearch node left cluster  Search latency is great than 500ms  Too Many Deleted Documents  "});index.add({'id':14,'href':'/zh/docs/tutorials/start_with_specify_user/','title':"如何指定内置账户名和密码启动 INFINI Console",'section':"动手教程",'content':"如何指定内置账户名和密码启动 INFINI Console #  准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能  INFINI Console 内置账户 #  INFINI Console 在开启安全的情况下，内置了一个管理员账户。 在不指定账户名和密码的情况下，INFINI Console 默认情况下内置账户的用户名和密码都是 admin。\n指定账户名和密码启动 INFINI Console #  INFINI Console 支持使用环境变量的方式指定账户名和密码启动，下面以 Macos 操作系统为例：\nBOOTSTRAP_USERNAME=admin BOOTSTRAP_PASSWORD=123456 ./console-mac-amd64\n禁用内置账户 #  由于使用内置账户，可能存在安全隐患，例如密码设置太简单等。因此当我们使用内置账户 登录 INFINI Console 创建新的管理员账号之后，可以使用新管理员账号登录，然后在 系统管理\u0026gt;安全设置 里面禁用内置账户。禁用之后就无法使用内置账户登录 INFINI Console了。\n创建管理员账户 #  INFINI Console 内置了一个管理员角色 Administrator，创建新用户的时候赋予这个角色，新用户就拥有管理员权限了。\n点击 INFINI Console 左侧菜单 系统管理》安全设置，选择用户 Tab 页进入账户管理页。然后点击新建按钮，进入创建用户页面\n 输入用户名 root 角色选择 Administrator 点击保存按钮提交 将保存成功后的初始密码保存下来备用  使用新建的管理员禁用内置用户 #  使用上一步创建好的 root 用户和密码登录 INFINI Console, 然后在 系统管理\u0026gt;安全设置 里面打开禁用内置账户开关，看到如下界面时表示操作成功。\n"});index.add({'id':15,'href':'/zh/docs/reference/data/indices/','title':"索引管理",'section':"数据管理",'content':"索引管理 #  索引列表 #  索引列表包括对索引的增删改查操作。\n新建索引 #  输入新索引名称及索引设置即可完成添加。\n索引详情 #  可以查看索引健康状态、分片数、文档数、存储大小等详情，以及Mappings、Edit settings的查看和修改。\n"});index.add({'id':16,'href':'/zh/docs/getting-started/ilm/','title':"索引设置",'section':"入门指南",'content':"索引设置 #  INFINI Console 的所有监控指标都保存在 Elasticsearch 索引里面，随着时间的推移数据会越来越多，我们可以配置索引的生命周期来适配我们的监控存储需求。\n配置默认索引模板 #  然后就可以配置 Elasticsearch 集群的索引模板了，在 系统监控 集群上执行下面的命令创建索引的模板。\n 展开查看 Elasticsearch 的模板定义 ...  PUT _template/.infini { \u0026quot;order\u0026quot;: 0, \u0026quot;index_patterns\u0026quot;: [ \u0026quot;.infini_*\u0026quot; ], \u0026quot;settings\u0026quot;: { \u0026quot;index\u0026quot;: { \u0026quot;max_result_window\u0026quot;: \u0026quot;10000000\u0026quot;, \u0026quot;mapping\u0026quot;: { \u0026quot;total_fields\u0026quot;: { \u0026quot;limit\u0026quot;: \u0026quot;20000\u0026quot; } }, \u0026quot;analysis\u0026quot;: { \u0026quot;analyzer\u0026quot;: { \u0026quot;suggest_text_search\u0026quot;: { \u0026quot;filter\u0026quot;: [ \u0026quot;word_delimiter\u0026quot; ], \u0026quot;tokenizer\u0026quot;: \u0026quot;classic\u0026quot; } } }, \u0026quot;number_of_shards\u0026quot;: \u0026quot;1\u0026quot; } }, \u0026quot;mappings\u0026quot;: { \u0026quot;dynamic_templates\u0026quot;: [ { \u0026quot;strings\u0026quot;: { \u0026quot;mapping\u0026quot;: { \u0026quot;ignore_above\u0026quot;: 256, \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;match_mapping_type\u0026quot;: \u0026quot;string\u0026quot; } } ] }, \u0026quot;aliases\u0026quot;: {} }     给索引 .infini_metrics 配置生命周期 #   展开查看设置 ...  PUT _ilm/policy/infini_metrics-30days-retention { \u0026quot;policy\u0026quot;: { \u0026quot;phases\u0026quot;: { \u0026quot;hot\u0026quot;: { \u0026quot;min_age\u0026quot;: \u0026quot;0ms\u0026quot;, \u0026quot;actions\u0026quot;: { \u0026quot;rollover\u0026quot;: { \u0026quot;max_age\u0026quot;: \u0026quot;30d\u0026quot;, \u0026quot;max_size\u0026quot;: \u0026quot;50gb\u0026quot; }, \u0026quot;set_priority\u0026quot;: { \u0026quot;priority\u0026quot;: 100 } } }, \u0026quot;delete\u0026quot;: { \u0026quot;min_age\u0026quot;: \u0026quot;30d\u0026quot;, \u0026quot;actions\u0026quot;: { \u0026quot;delete\u0026quot;: { \u0026quot;delete_searchable_snapshot\u0026quot;: true } } } } } } PUT _template/.infini_metrics-rollover { \u0026quot;order\u0026quot; : 100000, \u0026quot;index_patterns\u0026quot; : [ \u0026quot;.infini_metrics*\u0026quot; ], \u0026quot;settings\u0026quot; : { \u0026quot;index\u0026quot; : { \u0026quot;format\u0026quot; : \u0026quot;7\u0026quot;, \u0026quot;lifecycle\u0026quot; : { \u0026quot;name\u0026quot; : \u0026quot;infini_metrics-30days-retention\u0026quot;, \u0026quot;rollover_alias\u0026quot; : \u0026quot;.infini_metrics\u0026quot; }, \u0026quot;codec\u0026quot; : \u0026quot;best_compression\u0026quot;, \u0026quot;number_of_shards\u0026quot; : \u0026quot;1\u0026quot;, \u0026quot;translog.durability\u0026quot;:\u0026quot;async\u0026quot; } }, \u0026quot;mappings\u0026quot; : { \u0026quot;dynamic_templates\u0026quot; : [ { \u0026quot;strings\u0026quot; : { \u0026quot;mapping\u0026quot; : { \u0026quot;ignore_above\u0026quot; : 256, \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;match_mapping_type\u0026quot; : \u0026quot;string\u0026quot; } } ] }, \u0026quot;aliases\u0026quot; : { } } # delete old index DELETE .infini_metrics DELETE .infini_metrics-00001 PUT .infini_metrics-00001 { \u0026quot;settings\u0026quot;: { \u0026quot;index.lifecycle.rollover_alias\u0026quot;:\u0026quot;.infini_metrics\u0026quot; , \u0026quot;refresh_interval\u0026quot;: \u0026quot;5s\u0026quot; }, \u0026quot;aliases\u0026quot;:{ \u0026quot;.infini_metrics\u0026quot;:{ \u0026quot;is_write_index\u0026quot;:true } } }     如果之前已经存在索引 .infini_metrics，需要先删除。\n给索引 .infini_alert-history 配置生命周期 #  告警功能存储执行记录的索引数据量很大，所以需要配置一下 ILM 如下：\n 展开查看设置 ...  PUT _template/.infini_alert-history-rollover { \u0026quot;order\u0026quot; : 100000, \u0026quot;index_patterns\u0026quot; : [ \u0026quot;.infini_alert-history*\u0026quot; ], \u0026quot;settings\u0026quot; : { \u0026quot;index\u0026quot; : { \u0026quot;format\u0026quot; : \u0026quot;7\u0026quot;, \u0026quot;lifecycle\u0026quot; : { \u0026quot;name\u0026quot; : \u0026quot;infini_metrics-30days-retention\u0026quot;, \u0026quot;rollover_alias\u0026quot; : \u0026quot;.infini_alert-history\u0026quot; }, \u0026quot;codec\u0026quot; : \u0026quot;best_compression\u0026quot;, \u0026quot;number_of_shards\u0026quot; : \u0026quot;1\u0026quot;, \u0026quot;translog.durability\u0026quot;:\u0026quot;async\u0026quot; } }, \u0026quot;mappings\u0026quot; : { \u0026quot;dynamic_templates\u0026quot; : [ { \u0026quot;strings\u0026quot; : { \u0026quot;mapping\u0026quot; : { \u0026quot;ignore_above\u0026quot; : 256, \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;match_mapping_type\u0026quot; : \u0026quot;string\u0026quot; } } ] }, \u0026quot;aliases\u0026quot; : { } } DELETE .infini_alert-history DELETE .infini_alert-history-00001 PUT .infini_alert-history-00001 { \u0026quot;settings\u0026quot;: { \u0026quot;index.lifecycle.rollover_alias\u0026quot;:\u0026quot;.infini_alert-history\u0026quot; , \u0026quot;refresh_interval\u0026quot;: \u0026quot;5s\u0026quot; }, \u0026quot;aliases\u0026quot;:{ \u0026quot;.infini_alert-history\u0026quot;:{ \u0026quot;is_write_index\u0026quot;:true } }, \u0026quot;mappings\u0026quot;: { \u0026quot;properties\u0026quot; : { \u0026quot;condition\u0026quot; : { \u0026quot;properties\u0026quot; : { \u0026quot;items\u0026quot; : { \u0026quot;properties\u0026quot; : { \u0026quot;expression\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;minimum_period_match\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;long\u0026quot; }, \u0026quot;operator\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;severity\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;values\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 } } }, \u0026quot;operator\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 } } }, \u0026quot;condition_result\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;object\u0026quot;, \u0026quot;enabled\u0026quot; : false }, \u0026quot;context\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot; : [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;created\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;date\u0026quot; }, \u0026quot;expression\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot; : [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;id\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;is_escalated\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;boolean\u0026quot; }, \u0026quot;is_notified\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;boolean\u0026quot; }, \u0026quot;message\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;objects\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot; : [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;resource_id\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;resource_name\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;rule_id\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;rule_name\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;search_text\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;text\u0026quot;, \u0026quot;analyzer\u0026quot; : \u0026quot;suggest_text_search\u0026quot;, \u0026quot;index_prefixes\u0026quot; : { \u0026quot;min_chars\u0026quot; : 2, \u0026quot;max_chars\u0026quot; : 5 }, \u0026quot;index_phrases\u0026quot; : true }, \u0026quot;severity\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;state\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;title\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;updated\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;date\u0026quot; } } } }     给索引 .infini_activities 配置生命周期 #   展开查看设置 ...  PUT _template/.infini_activities-rollover { \u0026quot;order\u0026quot; : 100000, \u0026quot;index_patterns\u0026quot; : [ \u0026quot;.infini_activities*\u0026quot; ], \u0026quot;settings\u0026quot; : { \u0026quot;index\u0026quot; : { \u0026quot;format\u0026quot; : \u0026quot;7\u0026quot;, \u0026quot;lifecycle\u0026quot; : { \u0026quot;name\u0026quot; : \u0026quot;infini_metrics-30days-retention\u0026quot;, \u0026quot;rollover_alias\u0026quot; : \u0026quot;.infini_activities\u0026quot; }, \u0026quot;codec\u0026quot; : \u0026quot;best_compression\u0026quot;, \u0026quot;number_of_shards\u0026quot; : \u0026quot;1\u0026quot;, \u0026quot;translog.durability\u0026quot;:\u0026quot;async\u0026quot; } }, \u0026quot;mappings\u0026quot; : { \u0026quot;dynamic_templates\u0026quot; : [ { \u0026quot;strings\u0026quot; : { \u0026quot;mapping\u0026quot; : { \u0026quot;ignore_above\u0026quot; : 256, \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;match_mapping_type\u0026quot; : \u0026quot;string\u0026quot; } } ] }, \u0026quot;aliases\u0026quot; : { } } DELETE .infini_activities DELETE .infini_activities-00001 PUT .infini_activities-00001 { \u0026quot;settings\u0026quot;: { \u0026quot;index.lifecycle.rollover_alias\u0026quot;:\u0026quot;.infini_activities\u0026quot; , \u0026quot;refresh_interval\u0026quot;: \u0026quot;5s\u0026quot; }, \u0026quot;aliases\u0026quot;:{ \u0026quot;.infini_activities\u0026quot;:{ \u0026quot;is_write_index\u0026quot;:true } } }     "});index.add({'id':17,'href':'/zh/docs/reference/data/alias/','title':"别名管理",'section':"数据管理",'content':"别名管理 #  别名列表 #  别名列表包括对别名的增删改查操作。\n新建别名 #   别名：输入别名名称 索引：选择别名对应的目标索引，支持使用 (*) 来绑定多个索引。 是否为写索引：指定选择的索引是否可写，如果别名只绑定一个索引，则默认该索引可写；如果是通过(*) 绑定多个索引，最需要指定其中一个索引为可写。  别名与索引关系列表 #  点开别名列表行首的+号按钮，会展开显示该别名对应绑定的索引列表，同时可以对索引进行关系绑定更新设置和删除。\n"});index.add({'id':18,'href':'/zh/docs/reference/alerting/channel/','title':"告警渠道",'section':"告警管理",'content':"告警渠道 #  简介 #  告警渠道用于当告警规则触发之后，发送通知消息的通道配置，目前支持 webhook。\n渠道列表 #  在渠道列表中可以查询已经添加的渠道\n新建告警渠道 #  在渠道列表页面中点击新建按钮进入新建告警渠道页面\n 输入渠道名称（必填） 选择渠道类型（当前仅支持 webhook ） 输入 webhook 地址 选择 HTTP 请求的方法，默认 POST 按需添加 HTTP 请求头 配置 webhook 请求体 点击保存按钮提交  更新渠道配置 #  在渠道列表中选择需要更新的渠道点击编辑按钮进入更新渠道配置页\n操作参考新建告警渠道\n删除告警渠道 #  点击告警渠道列表表格中的删除按钮，进行二次确认，确认删除后执行删除操作。\n"});index.add({'id':19,'href':'/zh/docs/tutorials/create_readonly_account/','title':"如何轻松创建一个 Elasticsearch “游客” 用户",'section':"动手教程",'content':"如何轻松创建一个 Elasticsearch “游客” 用户 #  简介 #  有些情况下，我们想给客户分享一下某些功能或者数据，但是又不希望数据被修改。 这个时候我们就需要创建一个“游客” 用户了。本文简单地介绍了如何使用 INFINI Console 创建\u0026quot;游客\u0026quot;用户。\n准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能  创建角色 #  点击 INFINI Console 左侧菜单 系统管理》安全设置，选择角色 Tab 页进入角色管理页。\n新建平台角色 readonly #  点击新建按钮，选择平台角色，新建一个平台角色 readonly，操作步骤如下：\n 输入角色名称 readonly 展开所有的功能权限 除了系统设置下面的安全功能，其他所有的功能都选择 Read 权限。 系统设置下面的安全功能 设置为 None 权限。 点击保存按钮提交   选择某个功能的 All 权限代表拥有这个功能的读和写的操作权限， Read 代表只拥有读的权限， None 代表没有该功能权限（用户登录之后菜单中没有该功能）\n 新建数据角色 es-v7171 #  点击新建按钮，选择数据角色，新建一个数据角色 es-v7171，操作步骤如下：\n 输入角色名称 es-v7171 集群权限选择集群 es-v7171 点击保存按钮提交  新建账户 guest #  点击 INFINI Console 左侧菜单 系统管理》安全设置，选择用户 Tab 页进入账户管理页。 点击新建按钮，新建账户 guest ，并赋予这个账户角色 readonly, es-v7171\n点击保存提交，创建成功之后就可以使用 guest 账户登录 INFINI Console ，并且只拥有只读权限。\n"});index.add({'id':20,'href':'/zh/docs/reference/migration/migration/','title':"数据迁移",'section':"容灾备份",'content':"数据迁移 #  创建迁移任务 #  点击 INFINI Console 中左侧菜单 容灾备份》数据迁移，然后点击新建按钮创建迁移任务，如下图所示：\n配置迁移集群 #  在源集群列表中选择集群 es-v5616, 在目标集群列表中选择集群 es-v7140\n配置迁移索引 #  点击选择迁移索引按钮, 如下图：\n这里我们选择了两个索引 test-10 和 test-15 ,然后点击确认\n 选择索引的时候请确认目标集群相应索引是否创建好 mapping, setting 等元数据信息\n 表格右方可以设置目标索引名称和文档 type，按需修改即可，这里我们将索引 test-10 重命名为 test-10-x, 将索引 test-15 重命名为 test-15-x，文档类型都重命名为 _doc。 选择完索引之后，点击下一步，进行迁移任务的数据范围设置和分区设置，如下图：\n配置数据范围 #  如果需要过滤数据迁移，可以进行数据范围的设置，这里我们进行全量的数据迁移，就不设置了\n配置数据分区 #  如果一个索引数据量特别大，可以进行数据分区的设置。数据分区根据设置的字段，以及分区步长将数据拆成多段，系统最终会将一个分段的数据作为一个子任务去运行，迁移数据， 这样的话即使，一个分段迁移过程出现异常，只需要重跑这个子任务。\n数据分区设置目前支持按照日期类型字段（date）, 和数字类型 (number) 拆分分区，如上图所示，我们选择日期类型字段 now_widh_format 进行拆分分区，分区步长设置为 5分钟(5m), 然后点击预览按钮，可以看到根据设置拆分可以得到 8 个分区（文档数为0的分区最终不会生成子任务）。 根据预览信息确认分区设置无误之后，点击保存关闭分区设置并保存，然后点击下一步进行运行设置。\n运行设置 #  一般情况下使用默认设置，然后执行节点选择网关实例 Dynamo，然后点击创建任务。\n 如果没有在网关管理》实例管理里面注册网关实例，需要提前注册\n 启动迁移任务 #  创建迁移任务成功后会看到任务列表，如下图：\n可以看到，最近一条任务就是我们刚创建的，然后在表格右侧操作栏中点击 start 开始任务（任务开始之前，需要确认目标集群中索引是否已经设置好mapping， 和 settings, 索引模版，ilm ）。\n点击开始按钮 启动迁移任务。\n查看迁移任务进度 #  任务启动成功之后，点击刷新按钮，刷新列表，看到操作一栏中有详情入口时，点击详情进入任务详情页查看任务执行状态。开启自动刷新之后，我们可以看到任务详情有如下变化：\n图中蓝色方块表示，子任务（分区任务）已经在运行，灰色表示任务还没有开始\n上图中可以看到方块变成了浅绿色，表示子任务（分区任务）已经数据导出完成，索引 test-10的迁移进度是 65.5%, 索引 test-15 迁移进度是 18.05%\n上图中可以看到所有方块变成了绿色，索引迁移进度都是 100%, 表示数据已经迁移完成。\n"});index.add({'id':21,'href':'/zh/docs/tutorials/role_with_different_rights/','title':"如何给不同 INFINI Console 账户分配不同 Elasticsearch 集群访问权限",'section':"动手教程",'content':"如何给不同 INFINI Console 账户分配不同 Elasticsearch 集群访问权限 #  简介 #  本文将介绍使用 INFINI Console 给两个不同账户分配两个不同的 Elasticsearch 集群管理权限\n准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能 注册至少两个 Elasticsearch 集群到 INFINI Console  创建角色 #  点击 INFINI Console 左侧菜单 系统管理》安全设置，选择角色 Tab 页进入角色管理页。\n新建平台角色 platform_role #  点击新建按钮，选择平台角色，新建一个平台角色 platform_role，操作步骤如下：\n 输入角色名称 platform_role 展开所有的功能权限 除了系统设置下面的安全功能，其他所有的功能都选择 All 权限。 系统设置下面的安全功能 设置为 None 权限。 点击保存按钮提交   选择某个功能的 All 权限代表拥有这个功能的读和写的操作权限， Read 代表只拥有读的权限， None 代表没有该功能权限（用户登录之后菜单中没有该功能）\n 新建数据角色 es-v7171 #  点击新建按钮，选择数据角色，新建一个数据角色 es-v7171\n新建数据角色 es-v630 #  点击新建按钮，选择数据角色，新建一个数据角色 es-v630，配置同角色 es-v7171 类似\n创建账户 #  点击 INFINI Console 左侧菜单 系统管理》安全设置，选择用户 Tab 页进入账户管理页。\n新建账户 zhangsan #  点击新建按钮，新建账户 zhangsan ，并赋予这个账户角色 platform_role, es-v717\n点击保存按钮提交创建成功之后，保存一下账户密码\n新建账户 wangwu #  点击新建按钮，新建账户 wangwu ，并赋予这个账户角色 platform_role, es-v630 ,配置同账户 zhangsan 类似\n使用管理员账号登录 #  使用管理员账号登录之后，查看平台概览，注册的 13 个集群都可以看到\n使用账号 zhangsan 登录 #  使用账号 zhangsan 登录之后，查看平台概览，只能看到集群 es-v7171\n使用账号 wangwu 登录 #  使用账号 zhangsan 登录之后，查看平台概览，只能看到集群 es-v630\n小结 #  通过创建不同的角色并且赋予不同的 Elasticsearch 集群权限，然后将角色赋予用户，我们可以快速的实现 对不同用户赋予不同的 Elasticsearch 集群权限。\n"});index.add({'id':22,'href':'/zh/docs/tutorials/role_with_index_limit/','title':"如何给 INFINI Console 账户分配 Elasticsearch 索引级别权限",'section':"动手教程",'content':"如何给 INFINI Console 账户分配 Elasticsearch 索引级别权限 #  简介 #  本文将介绍使用 INFINI Console 限定某个账户只有 Elasticsearch 集群里面某些索引的管理权限\n准备 #   下载并安装最新版 INFINI Console 开启 INFINI Console 安全功能 注册至少两个 Elasticsearch 集群到 INFINI Console  创建角色 #  点击 INFINI Console 左侧菜单 系统管理》安全设置，选择角色 Tab 页进入角色管理页。\n新建平台角色 platform_role #  点击新建按钮，选择平台角色，新建一个平台角色 platform_role\n新建数据角色 test_index_only #  点击新建按钮，选择数据角色，新建一个数据角色 test_index_only, 然后做如下配置：\n 将集群只选择 es-v7140 （限制该角色只有 Elasticsearch 集群 es-v7140 的访问权限 ） 设置索引权限 索引只输入索引 pattern test* （限制该角色只有索引名称匹配 test* 的索引访问权限）  配置完成之后点击保存按钮提交。\n创建账户 #  点击 INFINI Console 左侧菜单 系统管理》安全设置，选择用户 Tab 页进入账户管理页。\n新建账户 liming #  点击新建按钮，新建账户 liming ，并赋予这个账户角色 platform_role, test_index_only\n点击保存按钮提交创建成功之后，保存一下账户密码\n使用管理员账号登录 #  使用管理员账号登录之后，点击菜单数据管理里面的索引管理，选择集群 es-v7140 ， 然后可以看到：\n使用账号 liming 登录 #  使用账号 liming 登录之后，点击菜单数据管理里面的索引管理，选择集群 es-v7140 ， 然后可以看到：\n小结 #  通过指定角色的 Elasticsearch 集群权限以及索引权限，可以轻松地将用户的权限分配精准控制到索引级别。\n"});index.add({'id':23,'href':'/zh/docs/reference/data/view/','title':"数据视图",'section':"数据管理",'content':"数据视图 #  视图列表 #  创建和管理数据视图可以帮助您更好地从 Elasticsearch 获取数据。\n创建视图 #  步骤 1 定义数据视图 #   输入数据视图名称 匹配规则：匹配相应索引，也可以使用 (*) 来匹配多个索引。  步骤 2 配置 #    为数据视图索引选择时间字段作为时间过滤\n  创建完成\n  编辑数据视图 #  页面列出匹配索引的所有字段，可以对字段的Format、Popularity等做相关设置。\n"});index.add({'id':24,'href':'/zh/docs/getting-started/docker/','title':"容器部署",'section':"入门指南",'content':"容器部署 #  INFINI Console 支持容器方式部署。\n下载镜像 #  INFINI Console 的镜像发布在 Docker 的官方仓库，地址如下：\n https://hub.docker.com/r/infinilabs/console\n使用下面的命令即可获取最新的容器镜像：\ndocker pull infinilabs/console:latest 验证镜像 #  将镜像下载到本地之后，可以看到 INFINI Console 平台的容器镜像非常小，只有不到 30MB，所以下载的速度应该是非常快的。\n✗ docker images REPOSITORY TAG IMAGE ID CREATED SIZE infinilabs/console latest 8c27cd334e4c 47 minutes ago 26.4MB 创建配置 #  现在需要创建一个配置文件 console.yml，来进行基本的配置，如下：\n# for this System Cluster, please use Elasticsearch v7.3+ elasticsearch: - name: default enabled: true monitored: false endpoint: http://192.168.3.188:9299 basic_auth: username: elastic password: ZBdkVQUUdF1Sir4X4BGB discovery: enabled: true web: enabled: true embedding_api: true auth: enabled: true ui: enabled: true path: .public vfs: true local: true network: binding: 0.0.0.0:9000 skip_occupied_port: true gzip: enabled: true elastic: elasticsearch: default enabled: true remote_configs: true health_check: enabled: true interval: 30s availability_check: enabled: true interval: 60s metadata_refresh: enabled: true interval: 30s cluster_settings_check: enabled: true interval: 20s store: enabled: false orm: enabled: true init_template: true template_name: \u0026quot;.infini\u0026quot; index_prefix: \u0026quot;.infini_\u0026quot; metrics: enabled: true major_ip_pattern: \u0026quot;192.*\u0026quot; queue: metrics elasticsearch: enabled: true cluster_stats: true node_stats: true index_stats: true pipeline: - name: indexing_merge auto_start: true keep_running: true processor: - indexing_merge: input_queue: \u0026quot;metrics\u0026quot; elasticsearch: \u0026quot;default\u0026quot; index_name: \u0026quot;.infini_metrics\u0026quot; output_queue: name: \u0026quot;metrics_requests\u0026quot; label: tag: \u0026quot;metrics\u0026quot; worker_size: 1 bulk_size_in_mb: 10 - name: consume-metrics_requests auto_start: true keep_running: true processor: - bulk_indexing: bulk: compress: true batch_size_in_mb: 10 batch_size_in_docs: 5000 consumer: fetch_max_messages: 100 queues: type: indexing_merge when: cluster_available: [ \u0026quot;default\u0026quot; ] - name: metadata_ingest auto_start: true keep_running: true processor: - metadata: bulk_size_in_mb: 10 bulk_max_docs_count: 5000 fetch_max_messages: 1000 elasticsearch: \u0026quot;default\u0026quot; queues: type: metadata category: elasticsearch consumer: group: metadata when: cluster_available: [ \u0026quot;default\u0026quot; ] - name: activity_ingest auto_start: true keep_running: true processor: - activity: bulk_size_in_mb: 10 bulk_max_docs_count: 5000 fetch_max_messages: 1000 elasticsearch: \u0026quot;default\u0026quot; queues: category: elasticsearch activity: true consumer: group: activity when: cluster_available: [ \u0026quot;default\u0026quot; ] Note: 上面配置里面的 Elasticsearch 的相关配置，请改成实际的服务器连接地址和认证信息，需要版本 v7.3 及以上。\n启动平台 #  使用如下命令启动极限网关容器：\ndocker run -p 9000:9000 -v=`pwd`/console.yml:/console.yml infinilabs/console:latest Docker Compose #  还可以使用 docker compose 来管理容器实例，新建一个 docker-compose.yml 文件如下：\nversion: \u0026quot;3.5\u0026quot; services: infini-console: image: infinilabs/console:latest ports: - 9000:9000 container_name: \u0026quot;infini-console\u0026quot; volumes: - ../console.yml:/console.yml volumes: dist: 在配置文件所在目录，执行如下命令即可启动，如下：\n➜ docker-compose up "});index.add({'id':25,'href':'/zh/docs/reference/system/security/role/','title':"角色管理",'section':"安全设置",'content':"角色管理 #  简介 #  角色管理包括对角色的增删改查操作。 INFINI Console 内置了一个管理员角色，角色名为 Administrator, 该角色拥有所有的操作权限, 包括所有的平台权限和数据权限。 数据角色用于控制 elasticsearch 集群的访问权限, 包括 elasticsearch API 的访问权限， elasticsearch API 的列表可以在安装目录下的 config/permission.json 文件中配置。\n创建平台角色 #   输入唯一的角色名. 选择平台权限，不能为空. 按需输入角色描述 点击保存按钮保存  All 权限代表同时拥有读和写的权限, Read 代表只读权限, None 代表没有权限。\n创建数据角色 #   输入唯一的角色名. 选择一个或者多个集群， * 代表选择所有集群. 配置集群级别 API 权限, * 代表所有集群级别 API 权限. 配置索引级别 API 权限, * 代表所有索引级别 API 权限. 按需输入角色描述 点击保存按钮保存  查询角色 #  输入关键字点击搜索按钮查询角色。\n更新平台角色 #  按需修改角色，然后点击保存按钮保存。\n更新数据角色 #  按需修改角色，然后点击保存按钮保存。\n"});index.add({'id':26,'href':'/zh/docs/screenshot/','title':"系统截图",'section':"Docs",'content':"系统截图 #  集群概览 #  集群动态 #  告警管理 #  集群监控 #  数据管理 #  命令工具 #  集群管理 #  安全设置 #  "});index.add({'id':27,'href':'/zh/docs/reference/system/security/','title':"安全设置",'section':"系统管理",'content':"安全设置 #  简介 #  INFINI Console Security 具有以下安全方面的能力和优势:\n 给不同的用户授权访问不同的平台功能 给不同的用户授权不同的 Elasticsearch 集群访问权限，权限粒度可以控制到索引级别和 Elasticsearch API 级别  INFINI Console Security 包含两种角色\n 平台角色，用于平台功能层面的权限控制 数据角色, 用于控制 Elasticsearch 集群数据的权限控制  INFINI Console Security 默认是开启的，如果需要关闭，可以修改 console.yml 配置文件中的 web\u0026gt;auth\u0026gt;enabled 配置,将其改为 false,如下所示：\nweb: enabled: true embedding_api: true auth: enabled: false ui: enabled: true path: .public vfs: true local: true network: binding: 0.0.0.0:9000 skip_occupied_port: true gzip: enabled: true  开启安全功能之后，需要用户密码登录 INFINI Console 。INFINI Console 内置了一个管理员账户，账户名和密码都为 admin 。\n "});index.add({'id':28,'href':'/zh/docs/reference/data/discover/','title':"数据探索",'section':"数据管理",'content':"数据探索 #  简介 #  在数据探索里，可以根据时间、字段等条件对索引或者视图下的数据进行搜索查询，数据展示方式有常规模式和Insight模式。\n搜索工具栏 #  索引(视图) #  搜索语句 #  时间范围 #  字段过滤 #  保存搜索 #  保存的搜索列表 #  Insight模式 #  Insight配置 #  常规模式 #  常规模式下用多功能图表灵活地添加字段来展示数据\n可对文档数据进行编辑、删除等操作\nInsight模式 #  Insight模式下会根据数据特征推送可视化图表来展示数据\n可通过推送列表添加图表\n可对图表进行编辑、删除\n"});index.add({'id':29,'href':'/zh/docs/reference/system/security/settings/','title':"安全设置",'section':"安全设置",'content':"安全设置 #  禁用内置用户 #  当开启安全的之后，在没有指定用户和密码的情况下启动 console ，系统会有一个 默认的内置用户 admin。当添加新的拥有管理员权限的用户之后，可以将内置用户禁用。\n 不能使用内置用户禁用自己  "});index.add({'id':30,'href':'/zh/docs/user-cases/','title':"用户案例",'section':"Docs",'content':"用户案例 #  谁在用? #  如果您正在使用 INFINI Console 并且您觉得还不错愿意告诉大家您也在用的话，请在这个 Github Discussion里留言告诉我们，感谢您的支持和鼓励。\n国内用户 #            "});index.add({'id':31,'href':'/zh/docs/tutorials/cluster_slow_request/','title':"如何监控 Elasticsearch 里面的慢查询请求",'section':"动手教程",'content':"如何监控 Elasticsearch 里面的慢查询请求 #  简介 #  很多时候，Elasticsearch 集群会出现数据写入或者查询流量高峰期的情况，这个时候 Elasticsearch 集群压力会很大，通过对 Elasticsearch 索引查询的延迟的监控告警。 可以让我们定位 Elasticsearch 集群的压力主要集中在哪些索引。本文将介绍如何使用 INFINI Console 告警功能监控 Elasticsearch 里面的慢查询请求索引。\n准备 #   下载并安装最新版 INFINI Console 使用INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console, 点击左侧菜单 告警管理》规则管理 进入告警管理页，然后点击 新建按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console , 请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern, 这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（ Elasticsearch 查询 DSL ） 这里我们需要过滤监控指标类别为 index_stats，并且索引名称不能为 _all, DSL 如下：  { \u0026quot;bool\u0026quot;: { \u0026quot;must\u0026quot;: [ { \u0026quot;term\u0026quot;: { \u0026quot;metadata.name\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;index_stats\u0026quot; } } }, { \u0026quot;term\u0026quot;: { \u0026quot;metadata.category\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;elasticsearch\u0026quot; } } } ], \u0026quot;must_not\u0026quot;: [ { \u0026quot;term\u0026quot;: { \u0026quot;metadata.labels.index_name\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;_all\u0026quot; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据索引名称分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.index_name 配置告警指标，选择聚合字段 payload.elasticsearch.index_stats.total.search.query_time_in_millis，统计方法求导 derivative。然后再添加一个告警指标，选择聚合字段 payload.elasticsearch.index_stats.total.search.query_total，统计方法 derivative。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 a/b来计算延时， 配置告警条件，这里配置三个告警条件，配置 持续一个周期 延时 大于 100 的时候，触发 P3(Low) 告警; 配置 持续一个周期 延时 大于 500 的时候，触发 P1(High) 告警; 配置 持续一个周期 延时 大于 1000 的时候，触发 P0(Critical) 告警; 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; Index name:{{index .group_values 1}}; Current value:{{.result_value | to_fixed 2}}ms; {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59 ，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了查询延时过高的 Elasticsearch 集群 ID，索引名称, 延时大小。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理》告警中心进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群慢索引。配置告警规则之后， 一旦有任何 Elasticsearch 索引查询延时过高，都会触发告警并发送告警消息。\n"});index.add({'id':32,'href':'/zh/docs/tutorials/cluster_health_change/','title':"如何监控 Elasticsearch 集群健康状态",'section':"动手教程",'content':"如何监控 Elasticsearch 集群健康状态 #  简介 #  很多时候 Elasticsearch 集群会因为某些原因，集群健康状态会变为红色，这个时候 Elasticsearch 集群至少存在一个主分片未分配或者丢失。所以监控 Elasticsearch 集群 健康状态是很有必要的。本文将介绍如何使用 INFINI Console 告警功能监控 Elasticsearch 集群 健康状态。\n准备 #   下载并安装最新版 INFINI Console 使用INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console, 点击左侧菜单 告警管理》规则管理 进入告警管理页，然后点击 新建按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console , 请先注册） 选择告警对象 .infini_metrics（选择 Elasticsearch 集群下的索引，或者输入索引 pattern, 这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（ Elasticsearch 查询 DSL ） 这里我们需要过滤监控指标类别为 cluster_health，并且健康状态为红色的数据，DSL 如下：  { \u0026quot;bool\u0026quot;: { \u0026quot;must\u0026quot;: [ { \u0026quot;match\u0026quot;: { \u0026quot;payload.elasticsearch.cluster_health.status\u0026quot;: \u0026quot;red\u0026quot; } }, { \u0026quot;term\u0026quot;: { \u0026quot;metadata.name\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;cluster_health\u0026quot; } } } ] } }  选择时间字段和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要根据集群 ID 分组， 这里我们选择 metadata.labels.cluster_id 配置告警指标，选择聚合字段 payload.elasticsearch.cluster_health.status，统计方法 count 配置告警条件，配置 持续一个周期 聚合结果 大于等于 1，即触发 Critical 告警 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里   打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59 ，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n模拟触发告警规则 #  打开 INFINI Console 开发工具（Ctrl+Shift+O），输入如下图所示命令：\n收到告警通知消息 #  等待一分钟左右，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了健康状态变红的 Elasticsearch 集群 ID，点击消息下方的链接查看告警详细信息如下：\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理》告警中心进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群健康状态。配置告警规则之后， 一旦有任何 Elasticsearch 集群状态变红，都会触发告警并发送告警消息。\n"});index.add({'id':33,'href':'/zh/docs/tutorials/cluster_node_disk_usage/','title':"如何监控 Elasticsearch 集群节点磁盘使用率",'section':"动手教程",'content':"如何监控 Elasticsearch 集群节点磁盘使用率 #  简介 #  当系统磁盘使用率过高时，Elasticsearch 集群会出现数据写入不进去的情况，这样很可能导致数据丢失，所以监控 Elasticsearch 集群 节点磁盘使用率是很有必要的。本文将介绍如何使用 INFINI Console 告警功能监控 Elasticsearch 集群 节点磁盘的使用率。\n准备 #   下载并安装最新版 INFINI Console 使用INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console, 点击左侧菜单 告警管理》规则管理 进入告警管理页，然后点击 新建按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console , 请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern, 这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（ Elasticsearch 查询 DSL ） 这里我们需要过滤监控指标类别为 node_stats，DSL 如下：  { \u0026quot;bool\u0026quot;: { \u0026quot;must\u0026quot;: [ { \u0026quot;term\u0026quot;: { \u0026quot;metadata.name\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;node_stats\u0026quot; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据节点 ID 分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.node_id 配置告警指标，选择聚合字段 payload.elasticsearch.node_stats.fs.total.free_in_bytes，统计方法 avg。然后再添加一个告警指标，选择聚合字段 payload.elasticsearch.node_stats.fs.total.total_in_bytes，统计方法 avg。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 ((b-a)/b)*100，意思是先用总的磁盘空间减去剩余磁盘空间得到磁盘的已使用空间， 然后用磁盘的已使用空间除以总的磁盘空间再乘以 100，得到磁盘的使用率 配置告警条件，这里配置三个告警条件，配置 持续一个周期 磁盘使用率 大于 80 的时候，触发 P2(Medium) 告警; 配置 持续一个周期 磁盘使用率 大于 90 的时候，触发 P1(High) 告警; 配置 持续一个周期 磁盘使用率 大于 95 的时候，触发 P0(Critical) 告警; 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID：{{index .group_values 0}} ; NodeID：{{index .group_values 1}} ; Disk Usage:{{.result_value | to_fixed 2}}%； Free Storage:{{.relation_values.a | format_bytes 2}}； {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59 ，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了磁盘使用率过高的 Elasticsearch 集群 ID，节点 ID, 磁盘剩余空间。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理》告警中心进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群节点磁盘使用率。配置告警规则之后， 一旦有任何 Elasticsearch 节点磁盘使用率超过设定的阈值就会触发告警并发送告警消息。\n"});index.add({'id':34,'href':'/zh/docs/troubleshooting/','title':"常见问题",'section':"Docs",'content':"常见问题及故障处理 #  这里主要收集 INFINI Console 使用过程中遇到的常见问题及处理办法，欢迎反馈提交到 这里。\n常见问题 #  Elasticsearch 前面加上 Nginx，平台提示 400 错误 #  类似错误日志如下：\n[11-25 18:26:58] [TRC] [v0.go:390] search response: {\u0026quot;query\u0026quot;:{\u0026quot;match\u0026quot;:{\u0026quot;status\u0026quot;: \u0026quot;RUNNING\u0026quot;}}},\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;title\u0026gt;Error 400 (Bad Request)!!1\u0026lt;/title\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;400.\u0026lt;/b\u0026gt; \u0026lt;ins\u0026gt;That’s an error.\u0026lt;/ins\u0026gt; \u0026lt;p\u0026gt;Your client has issued a malformed or illegal request. \u0026lt;ins\u0026gt;That’s all we know.\u0026lt;/ins\u0026gt; [11-25 18:26:58] [ERR] [init.go:87] json: invalid character '\u0026lt;' looking for beginning of value: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=en\u0026gt; 问题描述 #  Nginx 对于 GET 请求类型，不支持传递请求体\n解决方案 #  将 INFINI Console 升级最新版本。\n注册集群后监控数据不显示 #  如下如所示：\n问题描述 #  INFINI Console 需要用到 Elasticsearch 7.0 以上版本的一些特性\n解决方案 #  将 INFINI Console 存储数据的 ES 集群版本升级到 v7.0+\n启动报错 #  [03-23 08:38:20] [ERR] [metadata.go:529] {\u0026quot;error\u0026quot;:{\u0026quot;root_cause\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;illegal_argument_exception\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;Can't merge a non object mapping [payload.node_state.settings.http.type] with an object mapping [payload.node_state.settings.http.type]\u0026quot;}],\u0026quot;type\u0026quot;:\u0026quot;illegal_argument_exception\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;Can't merge a non object mapping [payload.node_state.settings.http.type] with an object mapping [payload.node_state.settings.http.type]\u0026quot;},\u0026quot;status\u0026quot;:400} 或者出现错误\n[04-16 09:45:06] [ERR] [schema.go:144] error on update mapping: {\u0026quot;root_cause\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;mapper_parsing_exception\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;Failed to parse mapping [_doc]: analyzer [suggest_text_search] has not been configured in mappings\u0026quot;}],\u0026quot;type\u0026quot;:\u0026quot;mapper_parsing_exception\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;Failed to parse mapping [_doc]: analyzer [suggest_text_search] has not been configured in mappings\u0026quot;,\u0026quot;caused_by\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;illegal_argument_exception\u0026quot;,\u0026quot;reason\u0026quot;:\u0026quot;analyzer [suggest_text_search] has not been configured in mappings\u0026quot;}} 问题描述 #  版本 v0.3 修改了模板和 Mapping，如果升级之前未手动更新模板，旧索引已经存在且 Mapping 不是期望的 object 类型，会提示字段冲突或者分析器找不到。\n关于升级，请参考 升级说明\n解决方案 #   停止 INFINI Console 删除索引模板 .infini  DELETE _template/.infini  删除索引 .infini_node 和 .infini_index  DELETE .infini_node DELETE .infini_index  启动 INFINI Console  "});index.add({'id':35,'href':'/zh/docs/tutorials/cluster_node_cpu_usage/','title':"如何监控 Elasticsearch 集群节点的 CPU 使用率",'section':"动手教程",'content':"如何监控 Elasticsearch 集群节点的 CPU 使用率 #  简介 #  本文将介绍如何使用 INFINI Console 监控 Elasticsearch 集群节点磁盘的使用率，并进行告警。\n准备 #   下载并安装最新版 INFINI Console 使用INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console, 点击左侧菜单 告警管理》规则管理 进入告警管理页，然后点击 新建按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console , 请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern, 这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（ Elasticsearch 查询 DSL ） 这里我们需要过滤监控指标类别为 node_stats 及元数据分类为 elasticsearch，DSL 如下：  { \u0026quot;bool\u0026quot;: { \u0026quot;must\u0026quot;: [ { \u0026quot;term\u0026quot;: { \u0026quot;metadata.name\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;node_stats\u0026quot; } } }, { \u0026quot;term\u0026quot;: { \u0026quot;metadata.category\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;elasticsearch\u0026quot; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据节点 ID 分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.node_id。 配置告警指标，选择聚合字段 payload.elasticsearch.node_stats.process.cpu.percent，统计方法 avg。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 a。然后设置变量a的数值类型为比率Ratio。 配置告警条件，这里配置三个告警条件，配置 持续一个周期 CPU使用率 大于 80 的时候，触发 P2(Medium) 告警; 配置 持续一个周期 CPU使用率 大于 90 的时候，触发 P1(High) 告警; 配置 持续一个周期 CPU使用率 大于 95 的时候，触发 P0(Critical) 告警; 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; NodeID:{{index .group_values 1}}; CPU:{{.result_value | to_fixed 2}}%; {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59 ，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了当前规则触发的 Elasticsearch 集群 ID，节点 ID, 当前CPU使用率。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理》告警中心进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群节点的CPU使用率。配置告警规则之后， 一旦有任何 Elasticsearch 节点 CPU 使用率超过设定的阈值就会触发告警并发送告警消息。\n"});index.add({'id':36,'href':'/zh/docs/tutorials/cluster_node_jvm_usage/','title':"如何监控 Elasticsearch 集群节点的 JVM 使用率",'section':"动手教程",'content':"如何监控 Elasticsearch 集群节点的 JVM 使用率 #  简介 #  本文将介绍如何使用 INFINI Console 监控 Elasticsearch 集群节点 JVM 的使用率，并进行告警。\n准备 #   下载并安装最新版 INFINI Console 使用INFINI Console 注册 Elasticsearch 集群  创建告警规则 #  在浏览器中打开 INFINI Console, 点击左侧菜单 告警管理》规则管理 进入告警管理页，然后点击 新建按钮进入创建告警规则页。按以下步骤创建告警规则：\n 选择集群（这里需要选择 INFINI Console 存储数据的 Elasticsearch 集群，也就是在配置文件 console.yml 配置的 Elasticsearch 集群，如果没有注册到 INFINI Console , 请先注册） 输入告警对象 .infini_metrics*（选择 Elasticsearch 集群下的索引，或者输入索引 pattern, 这里因为 INFINI Console 采集的监控数据存放在索引 .infini_metrics 里面） 输入筛选条件（ Elasticsearch 查询 DSL ） 这里我们需要过滤监控指标类别为 node_stats 及元数据分类为 elasticsearch，DSL 如下：  { \u0026quot;bool\u0026quot;: { \u0026quot;must\u0026quot;: [ { \u0026quot;term\u0026quot;: { \u0026quot;metadata.name\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;node_stats\u0026quot; } } }, { \u0026quot;term\u0026quot;: { \u0026quot;metadata.category\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;elasticsearch\u0026quot; } } } ] } }  选择时间字段 timestamp 和统计周期用于做 date histogram 聚合   输入规则名称 分组设置（可选，可配置多个），当统计指标需要分组的时候设置，由于所有注册到 INFINI Console 的 Elasticsearch 集群监控指标都存储在索引 .infini_metrics 里面，所以需要先根据集群 ID 分组，然后再根据节点 ID 分组， 这里我们选择 metadata.labels.cluster_id 和 metadata.labels.node_id。 配置告警指标，选择聚合字段 payload.elasticsearch.node_stats.jvm.mem.heap_used_percent，统计方法 p90。 配置指标公式（当配置了一个以上的告警指标的时候，需要设置一个公式来计算目标指标），这里公式 fx 配置为 a。然后设置变量a的数值类型为比率Ratio。 配置告警条件，这里配置三个告警条件，配置 持续一个周期 JVM 使用率 大于 50 的时候，触发 P2(Medium) 告警; 配置 持续一个周期 JVM 使用率 大于 90 的时候，触发 P1(High) 告警; 配置 持续一个周期 JVM 使用率 大于 95 的时候，触发 P0(Critical) 告警; 设置执行周期，这里配置一分钟执行一次检查 设置事件标题，事件标题是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里 设置事件内容，事件内容是一个模版，可以使用模版变量，模版语法及模版变量用法参考 这里  Priority:{{.priority}} Timestamp:{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}} RuleID:{{.rule_id}} EventID:{{.event_id}} {{range .results}} ClusterID:{{index .group_values 0}}; NodeID:{{index .group_values 1}}; JVM used percent：{{.result_value | to_fixed 2}}%; {{end}}  打开配置告警渠道开关，选择右上角 add 快速选择一个告警渠道模版填充，关于怎么创建告警渠道模版请参考 这里 设置沉默周期 1 小时，即触发告警规则后，一个小时内只发送通知消息一次 设置接收时段，默认 00:00-23:59 ，即全天都可接收通知消息  设置完成之后点击保存按钮提交。\n收到告警通知消息 #  等待一会儿，收到钉钉告警消息通知如下：\n可以看到告警通知消息里面显示了当前规则触发的 Elasticsearch 集群 ID，节点 ID, 当前 JVM 使用率。\n查看告警消息中心 #  除了会收到外部通知消息外，INFINI Console 告警消息中心也会生成一条告警消息。点击菜单 告警管理》告警中心进入\n小结 #  通过使用 INFINI Console 告警功能， 可以很方便地监控 Elasticsearch 集群节点的 JVM 使用率。配置告警规则之后， 一旦有任何 Elasticsearch 节点 JVM 使用率超过设定的阈值就会触发告警并发送告警消息。\n"});index.add({'id':37,'href':'/zh/docs/tutorials/data_migration/','title':"如何使用 INFINI 迁移功能",'section':"动手教程",'content':"如何使用 INFINI 迁移功能 #  简介 #  本文将介绍如何使用 INFINI Console 和 INFINI Gateway 来迁移 Elasticsearch 索引数据。\n准备 #   下载并安装最新版 INFINI Console (版本要求 0.7 及以上) 下载并安装最新版的 INFINI Gateway (版本要求 1.9 及以上) 两个 Elasticsearch 集群  Gateway 迁移配置 #  配置文件名为 migration.yml\npath.data: data path.logs: log progress_bar.enabled: false stats.no_buffer: true elasticsearch: - name: task_from enabled: true schema: http hosts: - 192.168.3.6:9200 traffic_control: #global traffic control max_bps_per_node: 209715200 #max total bytes send to es per node, 200MB/s max_qps_per_node: 20000 #max total requests send to es per node, 20k/s discovery: # auto discovery elasticsearch cluster nodes enabled: true refresh: enabled: true interval: 60s pipeline: - name: target_indexing auto_start: true keep_running: true processor: - disorder_bulk_indexing: max_worker_size: 10 detect_interval: 100 bulk: compress: true batch_size_in_mb: 20 batch_size_in_docs: 5000 invalid_queue: bulk_indexing_400 queues: type: scroll_docs consumer: fetch_max_messages: 1000 - name: task_stats auto_start: true keep_running: true processor: - dynamic_task_stats: detect_interval: 10000 pipeline.dynamic: true pipeline.dynamic_task_size: 10 disk_queue: sync_timeout_in_ms: 10000 sync_every_records: 10000 elastic: elasticsearch: task_from enabled: true remote_configs: true health_check: enabled: true interval: 30s availability_check: enabled: true interval: 60s metadata_refresh: enabled: true interval: 30s cluster_settings_check: enabled: true interval: 20s store: enabled: false orm: enabled: true init_template: true template_name: \u0026quot;.infini\u0026quot; index_prefix: \u0026quot;.infini_\u0026quot; disk_queue.compress.segment.enabled: true 启动 Gateway #  ./gateway-xxx-xxx -config migration.yml\n注册 Gateway #  这里我们使用极限网关作为迁移任务的执行者，需要提前将网关实例注册到Console 里面管理，后面创建迁移任务的时候会用到。 点击 INFINI Console 中左侧菜单 网关管理》实例管理 ，然后点击 新建 按钮注册新的实例，如下图所示：\n输入网关的地址，这里要注意网关的默认 API 地址使用的是 2900 端口，这里我们输入 192.168.3.6:9200，然后点击下一步\n点击下一步，完成网关注册\n注册源集群和目标集群 #  点击 INFINI Console 中左侧菜单 系统管理》集群管理，然后点击注册集群，先后注册源集群 es-v5616 和目标集群 es-v7140，如下图所示：\n如果 Elasticsearch 集群有身份验证，需要设置身份验证信息，然后点击下一步\n确认集群信息无误，然后点击下一步\n到这里源目标集群就注册完成了，目标集群 es-v710 的注册步骤也是一样的，这里就不赘述了。\n创建迁移任务 #  点击 INFINI Console 中左侧菜单 容灾备份》数据迁移，然后点击新建按钮创建迁移任务，如下图所示：\n配置迁移集群 #  在源集群列表中选择集群 es-v5616, 在目标集群列表中选择集群 es-v7140\n配置迁移索引 #  点击选择迁移索引按钮, 如下图：\n这里我们选择了两个索引 test-10 和 test-15 ,然后点击确认\n 选择索引的时候请确认目标集群相应索引是否创建好 mapping, setting 等元数据信息\n 表格右方可以设置目标索引名称和文档 type，按需修改即可，这里我们将索引 test-10 重命名为 test-10-x, 将索引 test-15 重命名为 test-15-x，文档类型都重命名为 _doc。 选择完索引之后，点击下一步，进行迁移任务的数据范围设置和分区设置，如下图：\n配置数据范围 #  如果需要过滤数据迁移，可以进行数据范围的设置，这里我们进行全量的数据迁移，就不设置了\n配置数据分区 #  如果一个索引数据量特别大，可以进行数据分区的设置。数据分区根据设置的字段，以及分区步长将数据拆成多段，系统最终会将一个分段的数据作为一个子任务去运行，迁移数据， 这样的话即使，一个分段迁移过程出现异常，只需要重跑这个子任务。\n数据分区设置目前支持按照日期类型字段（date）, 和数字类型 (number) 拆分分区，如上图所示，我们选择日期类型字段 now_widh_format 进行拆分分区，分区步长设置为 5分钟(5m), 然后点击预览按钮，可以看到根据设置拆分可以得到 8 个分区（文档数为0的分区最终不会生成子任务）。 根据预览信息确认分区设置无误之后，点击保存关闭分区设置并保存，然后点击下一步进行运行设置。\n运行设置 #  一般情况下使用默认设置，然后执行节点选择先前注册的网关实例 Dynamo，然后点击创建任务。\n启动迁移任务 #  创建迁移任务成功后会看到任务列表，如下图：\n可以看到，最近一条任务就是我们刚创建的，然后在表格右侧操作栏中点击 start 开始任务（任务开始之前，需要确认目标集群中索引是否已经设置好mapping， 和 settings, 索引模版，ilm ）。\n点击开始按钮 启动迁移任务。\n查看迁移任务进度 #  任务启动成功之后，点击刷新按钮，刷新列表，看到操作一栏中有详情入口时，点击详情进入任务详情页查看任务执行状态。开启自动刷新之后，我们可以看到任务详情有如下变化：\n图中蓝色方块表示，子任务（分区任务）已经在运行，灰色表示任务还没有开始\n上图中可以看到方块变成了浅绿色，表示子任务（分区任务）已经数据导出完成，索引 test-10的迁移进度是 65.5%, 索引 test-15 迁移进度是 18.05%\n上图中可以看到所有方块变成了绿色，索引迁移进度都是 100%, 表示数据已经迁移完成。\n小结 #  使用 INFINI 数据迁移功能可以很方便地将 Elasticsearch 数据进行跨版本迁移，并且可以很直观地查看 当前数据的迁移进度。\n"});index.add({'id':38,'href':'/zh/docs/release-notes/','title':"版本历史",'section':"Docs",'content':"版本发布日志 #  这里是 INFINI Console 历史版本发布的相关说明。\n0.7.0 #  Breaking changes #  Features #   新增数据迁移。 新增初始化向导。 新增系统服务健康监控。 新增授权窗口。  Bug fix #   修复了 Discover 第一次加载未发起搜索请求的问题。  0.6.0 #  Breaking changes #  Features #   新增主机概览。 新增主机监控。 节点概览新增日志查看功能（需安装 Agent）。 Insight 配置框新增 Search 配置。  Bug fix #   修复了 Discover 字段过滤白屏问题。 修复了 Discover 表格添加字段后排序失效问题。 修复了低版本浏览器 js 不兼容导致集群注册不成功的问题。 修复了 Elasticsearch 8.x 删除文档报错不兼容的问题。 修复了创建新索引不成功时，异常处理的问题。 修复了元数据采集配置空指针引用的问题。 修复了开发工具中使用加载命令失败报错的问题。  Improvements #   本地列表搜索查找支持通配符过滤。 支持配置页面标题后缀。 优化告警规则必填字段标记显示。 优化 Discover 时间范围 Auto Fit，设为15分钟。 优化 Discover 保存搜索，会保存当前的字段过滤和 Insight 图表配置。 优化集群列表：增加链接跳转；支持集群列表 status 字段排序。  0.5.0 #  Breaking changes #  Features #   集群监控节点层面添加 IO 指标（仅支持 Linux 版本 Elasticsearch 集群）。 新增探针管理功能。 新增基于 Centos 的 Docker 镜像。 INFINI Insight 新增图表类型（单值、饼图、面积图）  Bug fix #   修复了 Gateway 实例列表刷新后多次请求的问题。 修复了 docker 镜像时区加载失败的问题。 修复了存储数据 Elasticsearch 集群不可用时，采集监控指标队列不消费的问题。 修复开发工具不能转发请求给后端集群为 Https 类型的问题。 修复 INFINI Insight 编辑组件后所有组件又重新获取数据的问题。 修复从其它页面的索引链接跳转到 Discover 时 Query 依然有旧状态的问题。  Improvements #   优化刷新集群状态日志输出。 优化了未授权时跳转至登录界面频繁的弹窗提示。 优化 Discover 搜索栏时间选择控件 UI，空间更紧凑，切换更方便。  0.4.0 #  Breaking changes #  Features #   数据探索新增 Insight 功能，根据索引下的数据特征推送图表，可视化展示指标数据。 数据探索新增保存搜索和回放搜索功能。 新增别名管理。  Bug fix #   修复了 v0.3.1 没有开启安全的情况下开发工具发送请求响应返回错误的 Bug。 修复了 AWS Elasticsearch 云环境 node http.public_address 没有，导致采集监控数据报错的 Bug。 Fixed the bug that when the Elasticsearch cluster for storing data is unavailable, the collected metric data are not consumed(Updating the settings of elastic\u0026gt;store defaults to false in console.yml).  Improvements #   优化 Console 存储数据 Elasticsearch 版本检查提示。  0.3.1 #  Bug fix #   The kv module should be initialized before elastic module The account profile api should get builtin username dynamically Fixed an issue where the index in the overview was not displayed correctly Fixed node health status in the overview was not displayed correctly Fixed the bug that the new channel could not get the type when the rule was submit  0.3.0 #  Breaking changes #  Features #   Support basic authentication Added platform overview Added cluster activities Added index management Added data view management Added data discover (Support both index and view) Support gzip compression and it is enabled by default Support rbac authorization Added alerting management (Support Webhook channel) Added time-zone quick selector  Bug fix #   Fixed bug:discover multi fields selected Fixed bug:the count of nodes and shards value incorrect in cluster overview Fixed bug:overview search request params field from do not counting from 0 Fixed bug:login page tab not centered Fixed bug:Re-login redirect jump parameter problem caused by session expiration Fixed bug:OverviewStatistic component mask state value incorrect Fixed bug:repeat http request pending state Fixed bug:console copy as curl without an endpoint  Improvements #   Rewritten monitoring UI Optimize cluster metrics line chart Optimize health status component Add filter component to quick filter clisters,nodes,indices Add local sort for table column of clisters,nodes,indices Add isTLS form field for Gateway register Index list and node list Support real-time and non-real-time data switching viewing The interval for collecting elasticsearch cluster state is configurable Optimized requests to elasticsearch Add Console version info Add client http request timeout auto abort Dev tool support search Proper Handle metrics collecting while cluster in partial failure  0.2.0 #  Breaking changes #  Features #   Collect Elasticsearch cluster_health metrics Added thread pool related metrics Optimize the grouping of metrics Index .infini_metrics support ilm configuration Added hot key(Ctrl+Shift+O) to dev tools English version support  Bug fix #   Fixed the \u0026ldquo;required authentication credentials\u0026rdquo; issue in the test connection cluster time Fixed the problem that the validation failed when the cluster address is a domain name and contains special characters Fixed the issue that monitoring data is not displayed on 32-bit operating systems Fixed the problem that the development tool was initialized blank when the storage ES address changed Fixed the problem that the pagination of cluster list page cannot work  Improvements #   Cluster view Added metrics of counting cluster master, data, and coordinating nodes Cluster view Added metric of cluster health Node view Add JVM grouping, display related information of JVM memory Node view added JVM GC frequency and GC delay metrics Use POST instead of GET when request body is not nil Node view added cache hit rate and other related metrics Node View added metric of the number of open files Show the last time of the metrics was collected When the cluster is unavailable  0.1.0 #   Elasticsearch clusters management Basic monitoring supported for Elasticsearch cluster Dev tools support elasticsearch  "});index.add({'id':39,'href':'/zh/docs/upgrade/','title':"版本更新",'section':"Docs",'content':"版本更新 #  这里是 INFINI Console 版本更新的相关说明。\nFrom 0.2 to 0.3 #  Update template .infini #  PUT _template/.infini { \u0026quot;order\u0026quot;: 0, \u0026quot;index_patterns\u0026quot;: [ \u0026quot;.infini_*\u0026quot; ], \u0026quot;settings\u0026quot;: { \u0026quot;index\u0026quot;: { \u0026quot;max_result_window\u0026quot;: \u0026quot;10000000\u0026quot;, \u0026quot;mapping\u0026quot;: { \u0026quot;total_fields\u0026quot;: { \u0026quot;limit\u0026quot;: \u0026quot;20000\u0026quot; } }, \u0026quot;analysis\u0026quot;: { \u0026quot;analyzer\u0026quot;: { \u0026quot;suggest_text_search\u0026quot;: { \u0026quot;filter\u0026quot;: [ \u0026quot;word_delimiter\u0026quot; ], \u0026quot;tokenizer\u0026quot;: \u0026quot;classic\u0026quot; } } }, \u0026quot;number_of_shards\u0026quot;: \u0026quot;1\u0026quot; } }, \u0026quot;mappings\u0026quot;: { \u0026quot;dynamic_templates\u0026quot;: [ { \u0026quot;strings\u0026quot;: { \u0026quot;mapping\u0026quot;: { \u0026quot;ignore_above\u0026quot;: 256, \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;match_mapping_type\u0026quot;: \u0026quot;string\u0026quot; } } ] }, \u0026quot;aliases\u0026quot;: {} } Close index .infini_cluster #  POST .infini_cluster/_close Update index settings of .infini_cluster #  PUT .infini_cluster/_settings { \u0026quot;analysis\u0026quot;: { \u0026quot;analyzer\u0026quot;: { \u0026quot;suggest_text_search\u0026quot;: { \u0026quot;filter\u0026quot;: [ \u0026quot;word_delimiter\u0026quot; ], \u0026quot;tokenizer\u0026quot;: \u0026quot;classic\u0026quot; } } } } Update index mappings of .infini_cluster #  PUT .infini_cluster/_mapping { \u0026quot;dynamic_templates\u0026quot;: [ { \u0026quot;strings\u0026quot;: { \u0026quot;match_mapping_type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;mapping\u0026quot;: { \u0026quot;ignore_above\u0026quot;: 256, \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; } } } ], \u0026quot;properties\u0026quot;: { \u0026quot;basic_auth\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;password\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;username\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; } } }, \u0026quot;created\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; }, \u0026quot;description\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; }, \u0026quot;discovery\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;refresh\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot; } } }, \u0026quot;enabled\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot; }, \u0026quot;endpoint\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;endpoints\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;host\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot;: [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;hosts\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;labels\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;health_status\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot;: 256 } } }, \u0026quot;location\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;dc\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;provider\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;rack\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;region\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; } } }, \u0026quot;monitored\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;boolean\u0026quot; }, \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;fields\u0026quot;: { \u0026quot;text\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; } } }, \u0026quot;order\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot; }, \u0026quot;owner\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;department\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot;: [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot;: [ \u0026quot;search_text\u0026quot; ] } } }, \u0026quot;project\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot;: [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;schema\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;search_text\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot;, \u0026quot;analyzer\u0026quot;: \u0026quot;suggest_text_search\u0026quot;, \u0026quot;index_prefixes\u0026quot;: { \u0026quot;min_chars\u0026quot;: 2, \u0026quot;max_chars\u0026quot;: 5 }, \u0026quot;index_phrases\u0026quot;: true }, \u0026quot;tags\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot;: [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;traffic_control\u0026quot;: { \u0026quot;properties\u0026quot;: { \u0026quot;max_bytes_per_node\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;max_connection_per_node\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;max_qps_per_node\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }, \u0026quot;max_wait_time_in_ms\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; } } }, \u0026quot;updated\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;date\u0026quot; }, \u0026quot;version\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot;: [ \u0026quot;search_text\u0026quot; ] } } } Open index .infini_cluster #  POST .infini_cluster/_open Update console.yml #  v0.3版本在v0.2版本上新增了 pipeline 配置：\n- name: metadata_ingest auto_start: true keep_running: true processor: - metadata: bulk_size_in_mb: 10 bulk_max_docs_count: 5000 fetch_max_messages: 1000 elasticsearch: \u0026quot;default\u0026quot; queues: type: metadata category: elasticsearch when: cluster_available: [ \u0026quot;default\u0026quot; ] - name: activity_ingest auto_start: true keep_running: true processor: - activity: bulk_size_in_mb: 10 bulk_max_docs_count: 5000 fetch_max_messages: 1000 elasticsearch: \u0026quot;default\u0026quot; queues: category: elasticsearch activity: true consumer: group: activity when: cluster_available: [ \u0026quot;default\u0026quot; ] 先停止 console 程序，再在console.yml 配置文件中的 pipeline 模块下添加上面面的配置，然后再启动 console 程序。\n给索引 .infini_alert-history 配置生命周期 #  v0.3 新增了告警功能，告警功能存储执行记录的索引数据量很大，所以需要配置一下 ILM 如下：\nPUT _template/.infini_alert-history-rollover { \u0026quot;order\u0026quot; : 100000, \u0026quot;index_patterns\u0026quot; : [ \u0026quot;.infini_alert-history*\u0026quot; ], \u0026quot;settings\u0026quot; : { \u0026quot;index\u0026quot; : { \u0026quot;format\u0026quot; : \u0026quot;7\u0026quot;, \u0026quot;lifecycle\u0026quot; : { \u0026quot;name\u0026quot; : \u0026quot;infini_metrics-30days-retention\u0026quot;, \u0026quot;rollover_alias\u0026quot; : \u0026quot;.infini_alert-history\u0026quot; }, \u0026quot;codec\u0026quot; : \u0026quot;best_compression\u0026quot;, \u0026quot;number_of_shards\u0026quot; : \u0026quot;1\u0026quot;, \u0026quot;translog.durability\u0026quot;:\u0026quot;async\u0026quot; } }, \u0026quot;mappings\u0026quot; : { \u0026quot;dynamic_templates\u0026quot; : [ { \u0026quot;strings\u0026quot; : { \u0026quot;mapping\u0026quot; : { \u0026quot;ignore_above\u0026quot; : 256, \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;match_mapping_type\u0026quot; : \u0026quot;string\u0026quot; } } ] }, \u0026quot;aliases\u0026quot; : { } } DELETE .infini_alert-history DELETE .infini_alert-history-00001 PUT .infini_alert-history-00001 { \u0026quot;settings\u0026quot;: { \u0026quot;index.lifecycle.rollover_alias\u0026quot;:\u0026quot;.infini_alert-history\u0026quot; , \u0026quot;refresh_interval\u0026quot;: \u0026quot;5s\u0026quot; }, \u0026quot;aliases\u0026quot;:{ \u0026quot;.infini_alert-history\u0026quot;:{ \u0026quot;is_write_index\u0026quot;:true } }, \u0026quot;mappings\u0026quot;: { \u0026quot;properties\u0026quot; : { \u0026quot;condition\u0026quot; : { \u0026quot;properties\u0026quot; : { \u0026quot;items\u0026quot; : { \u0026quot;properties\u0026quot; : { \u0026quot;expression\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;minimum_period_match\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;long\u0026quot; }, \u0026quot;operator\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;severity\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;values\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 } } }, \u0026quot;operator\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 } } }, \u0026quot;condition_result\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;object\u0026quot;, \u0026quot;enabled\u0026quot; : false }, \u0026quot;context\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot; : [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;created\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;date\u0026quot; }, \u0026quot;expression\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot; : [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;id\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;is_escalated\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;boolean\u0026quot; }, \u0026quot;is_notified\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;boolean\u0026quot; }, \u0026quot;message\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;objects\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;copy_to\u0026quot; : [ \u0026quot;search_text\u0026quot; ] }, \u0026quot;resource_id\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;resource_name\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;rule_id\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;rule_name\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;search_text\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;text\u0026quot;, \u0026quot;analyzer\u0026quot; : \u0026quot;suggest_text_search\u0026quot;, \u0026quot;index_prefixes\u0026quot; : { \u0026quot;min_chars\u0026quot; : 2, \u0026quot;max_chars\u0026quot; : 5 }, \u0026quot;index_phrases\u0026quot; : true }, \u0026quot;severity\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;state\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot;, \u0026quot;ignore_above\u0026quot; : 256 }, \u0026quot;title\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;keyword\u0026quot; }, \u0026quot;updated\u0026quot; : { \u0026quot;type\u0026quot; : \u0026quot;date\u0026quot; } } } } 升级常见问题 #  问题描述1 #  重复的索引index数据\n解决方案 #   停止 console 删除索引.infini_index 启动 console  问题描述2 #  重复的节点node数据\n解决方案 #   停止 console 删除索引 .infini_node 启动 console  问题描述3 #  data节点有监控数据，非data节点（master、client等）没有监控数据，如下图非data节点所示：\n解决方案 #  建议升级到最新版。\n问题描述4 #  页面出现空白，JS报错。\n解决方案 #  建议升级到最新版，并将具体报错信息反馈给我们。\n反馈 #  如有其他任何问题和建议，请通过右侧的反馈功能或点击 这里提交给我们，我们将持续优化，感谢您的支持！\n"});index.add({'id':40,'href':'/zh/docs/reference/alerting/variables/','title':"模板变量",'section':"告警管理",'content':"模板变量 #  简介 #  自定义告警触发事件内容时，除了自己撰写的固定文案外，事件标题、事件内容等也支持模板语法。可以使用事件中的字段实现文案的渲染。\n模板变量 #  用于渲染字段的语法为{{ .字段名 }}，可用于模板内容渲染的变量字段如下：\n   变量字段名 字段类型 说明 示例     rule_id string rule uuid c9f663tath2e5a0vksjg   rule_name string rule name High CPU usage   resource_id string resource uuid c9f663tath2e5a0vksjg   resource_name string resource name es-v716   event_id string identifier for check details c9f663tath2e5a0vksjx   timestamp number Millisecond timestamp 1654595042399   first_group_value string The first value of group_values in results c9aikmhpdamkiurn1vq0   first_threshold string The first value of threshold in results 90   priority string The highest priority in results critical   title string event title Node ({{.first_group_value}}) disk used \u0026gt;= 90%   message string event content EventID：{{.event_id}}; Cluster：{{.resource_name}}   results array result of groups    ┗ threshold array  [\u0026ldquo;90\u0026rdquo;]   ┗ priority string  high   ┗ group_values array  [\u0026ldquo;cluster-xxx\u0026rdquo;, \u0026ldquo;node-xxx\u0026rdquo;]   ┗ issue_timestamp number Millisecond timestamp 1654595042399   ┗ result_value float  91.2   ┗ relation_values map  {a:100, b:91.2}    变量使用示例 #  示例1:\n{\u0026quot;content\u0026quot;:\u0026quot;【Alerting】Event ID: {{.event_id}}, Cluster：{{.resource_name}}\u0026quot;} 示例2(数组遍历):\n{{range .results}} Cluster ID: {{index .group_values 0}} {{end}} 模板函数 #  除了直接展示告警事件中的字段值外，还支持使用模板函数对字段值进行进一步处理，优化输出。\n函数支持额外参数，当无需或不传递参数时，可以直接使用以下语法进行使用：\n{{ \u0026lt;模板变量\u0026gt; | \u0026lt;模板函数\u0026gt; }}\n具体实例如下：\n模板函数不带参数：\n告警事件触发时间：{{ .timestamp | datetime }} 模板函数带参数：\n告警事件触发时间：{{ .timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot; }} 多个函数组合使用：\n字节类型的数值格式化后再转位大写：{{.result_value | format_bytes 2 ｜ to_upper}} 完整的模板函数列表如下：\n   模板函数 参数 说明     to_fixed 固定小数位数 float类型数值保留N位小数位\n示例：{{.result_value | to_fixed 2}}\n输出：10.35   format_bytes 固定小数位数 字节类型数值格式化\n示例：{{.result_value | format_bytes 2}}\n输出：10.35gb   date  时间戳转为UTC日期\n示例：{{.timestamp | date}}\n输出：2022-05-01   date_in_zone 时区 时间戳转为当前区域日期\n示例：{{.timestamp | date_in_zone \u0026quot;Asia/Shanghai\u0026quot;}}\n输出：2022-05-01   datetime  时间戳转为UTC时间\n示例：{{.timestamp | datetime}}\n输出：2022-05-01 10:10:10   datetime_in_zone 时区 时间戳转为当前区域时间\n示例：{{.timestamp | datetime_in_zone \u0026quot;Asia/Shanghai\u0026quot;}}\n输出：2022-05-01 10:10:10   to_lower  英文字符转为小写\n示例：{{.resource_name | to_lower }}\n输出：cluster   to_upper  英文字符转为大写\n示例：{{.resource_name | to_upper }}\n输出：CLUSTER   add 数值类型 数值相加\n示例：{{.result_value | add 1 }}\n输出：2   sub 数值类型 数值相减\n示例：{{sub .result_value 1 }}\n输出：0   mul 数值类型 数值相乘\n示例：{{mul .result_value 3 2 }}\n输出：6   div 数值类型 数值相除\n示例：{{div .result_value 2 }}\n输出：0.5    常用模板语法 #  array 数组遍历：\n{{range .results}} priority: {{.priority}} {{end}} 通过数组下标取值：\n示例:group_values = [\u0026quot;value1\u0026quot;,\u0026quot;value2\u0026quot;,\u0026quot;value3\u0026quot;]\n{{index .group_values 0}} #输出值为：value1 {{index .group_values 2}} 输出值为：value3 if 条件分支：\n{{if pipeline}} T1 {{else}} T0 {{end}} 示例:\n{{if eq .priority \u0026quot;critical\u0026quot;}} \u0026quot;#C91010\u0026quot; {{else if eq .priority \u0026quot;high\u0026quot;}} \u0026quot;#EB4C21\u0026quot; {{else}} \u0026quot;#FFB449\u0026quot; {{end}} 完整的比较运算符用法：\neq Returns the boolean truth of arg1 == arg2 ne Returns the boolean truth of arg1 != arg2 lt Returns the boolean truth of arg1 \u0026lt; arg2 le Returns the boolean truth of arg1 \u0026lt;= arg2 gt Returns the boolean truth of arg1 \u0026gt; arg2 ge Returns the boolean truth of arg1 \u0026gt;= arg2   Slack message 模板完整示例 ...  { \u0026quot;blocks\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;section\u0026quot;, \u0026quot;text\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;【test201】Alerting:\\n\u0026lt;http://localhost:8000/#/alerting/alert/{{.event_id}}|{{.title}}\u0026gt; \u0026lt;@username\u0026gt;\u0026quot; } }, { \u0026quot;type\u0026quot;: \u0026quot;section\u0026quot;, \u0026quot;text\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Timestamp:* {{.issue_timestamp | datetime}}\u0026quot; } } ], \u0026quot;attachments\u0026quot;: [ {{range .results}} { \u0026quot;color\u0026quot;: {{if eq .priority \u0026quot;critical\u0026quot;}} \u0026quot;#C91010\u0026quot; {{else if eq .priority \u0026quot;high\u0026quot;}} \u0026quot;#EB4C21\u0026quot; {{else}} \u0026quot;#FFB449\u0026quot; {{end}}, \u0026quot;blocks\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;section\u0026quot;, \u0026quot;fields\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Cluster:* {{index .group_values 0}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Node:* {{index .group_values 1}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Threshold:* {{index .threshold 0}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Priority:* {{.priority}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Monitoring value:* {{.result_value}}\u0026quot; }, { \u0026quot;type\u0026quot;: \u0026quot;mrkdwn\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;*Disk usage:* {{.relation_values.a | format_bytes 2 | to_upper}}\u0026quot; } ] } ] }, {{end}} ] } 更多模板语法点击查看\n   "});index.add({'id':41,'href':'/zh/docs/resources/','title':"其它资源",'section':"Docs",'content':"其它资源 #  这里是一些和 INFINI Console 有关的外部有用资源。\n文章 #    INFINI Console 最新的 0.3 版本正式发布！  视频 #    INFINI Console 首发版本 Demo 演示  INFINI Console v0.3 版本 Demo 演示  INFINI Console 安全功能简介  如何指定内置账户名和密码启动 INFINI Console  如何使用 INFINI Console 轻松创建一个 Elasticsearch “游客”账号  如何给不同 INFINI Console 账户分配不同 Elasticsearch 集群访问权限  如何给 INFINI Console 账户分配 Elasticsearch 索引级别权限  INFINI Console 的告警功能概览  如何监控 Elasticsearch 集群健康状态  如何监控 Elasticsearch 集群节点磁盘使用率  如何监控 Elasticsearch 集群节点的 CPU 使用率  "});})();